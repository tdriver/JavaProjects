/*
 * ToolBoxApp.java
 *
 * Created on July 30, 2002, 3:28 PM
 */

package driver.ted.toolbox;
import javax.swing.UIManager;
import javax.swing.JWindow;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import driver.ted.utilities.T_JulianDate;
import java.util.prefs.Preferences;

/**
 *
 * @author  tdriver
 */
public class ToolBoxApp extends javax.swing.JFrame implements Runnable{
    
    public static int frameCount = 0;
    static ToolBoxApp app;
    Preferences prefs; 
    final String latitudePref = "Latitude";
    final String longitudePref = "Longitude";
    final String heightPref = "Height";
    final String timeOffsetPref = "TimeOffset";
//    static T_JulianDate jd;
//    static javax.swing.Timer timer1 = new javax.swing.Timer(1000,new ActionListener(){
//      public void actionPerformed(ActionEvent evt) {
//          jd.advance(0,0,0,0,0,1);
//          updateStatusRight();
//        }
//      });
    
    /** Creates new form ToolBoxApp */
    public ToolBoxApp() {
        prefs = Preferences.userNodeForPackage(this.getClass());
        initComponents();
        desktopPane.setBackground(java.awt.Color.black);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        statusFieldLeft = new javax.swing.JTextField();
        statusFieldRight = new javax.swing.JTextField();
        jToolBar1 = new javax.swing.JToolBar();
        timetoolButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        timetoolButton1 = new javax.swing.JButton();
        gpstoolButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        gpstoolButton1 = new javax.swing.JButton();
        coordinatetoolButton = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        coordinatetoolButton1 = new javax.swing.JButton();
        solartoolButton = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        solartoolButton1 = new javax.swing.JButton();
        lunartoolButton = new javax.swing.JButton();
        siderealtoolButton = new javax.swing.JButton();
        utilitiestoolButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        utilitiestoolButton1 = new javax.swing.JButton();
        defaultPreferencesButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        toolMenu = new javax.swing.JMenu();
        TimeTools = new javax.swing.JMenu();
        TimeTool = new javax.swing.JMenuItem();
        TimeIntervalTool = new javax.swing.JMenuItem();
        gpsTools = new javax.swing.JMenu();
        gpsTimetool = new javax.swing.JMenuItem();
        gpsTimeofweektool = new javax.swing.JMenuItem();
        coordinateTools = new javax.swing.JMenu();
        geodetic_ECEF = new javax.swing.JMenuItem();
        geodeticDistance = new javax.swing.JMenuItem();
        solarTools = new javax.swing.JMenu();
        dailySolarTool = new javax.swing.JMenuItem();
        solarPlotter = new javax.swing.JMenuItem();
        lunarToolFrame = new javax.swing.JMenuItem();
        siderealToolFrame = new javax.swing.JMenuItem();
        utilitiestool = new javax.swing.JMenu();
        colorchooserTool = new javax.swing.JMenuItem();
        numberConversiontool = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        showToolbarCheckBox = new javax.swing.JCheckBoxMenuItem();
        preferences = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        aboutMenuItem = new javax.swing.JMenuItem();

        setTitle("Ted's Toolbox V2.1");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(1, 2, 1, 0));

        statusFieldLeft.setEditable(false);
        statusFieldLeft.setText(" ");
        statusFieldLeft.setToolTipText("Shows the number of windows open");
        jPanel1.add(statusFieldLeft);

        statusFieldRight.setEditable(false);
        statusFieldRight.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        statusFieldRight.setText(" ");
        jPanel1.add(statusFieldRight);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jToolBar1.setRollover(true);
        jToolBar1.setName("Ted's Toolbox Toolbar");
        timetoolButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/timetool.gif")));
        timetoolButton.setToolTipText("Time Analysis");
        timetoolButton.setFocusPainted(false);
        timetoolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timetoolButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(timetoolButton);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setMaximumSize(new java.awt.Dimension(1, 25));
        jToolBar1.add(jSeparator2);

        timetoolButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/timetool.gif")));
        timetoolButton1.setToolTipText("Time Interval Analysis");
        timetoolButton1.setFocusPainted(false);
        timetoolButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timetoolButton1ActionPerformed(evt);
            }
        });

        jToolBar1.add(timetoolButton1);

        gpstoolButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/GPStool.gif")));
        gpstoolButton.setToolTipText("GPS time");
        gpstoolButton.setFocusPainted(false);
        gpstoolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpstoolButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(gpstoolButton);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setMaximumSize(new java.awt.Dimension(1, 25));
        jToolBar1.add(jSeparator3);

        gpstoolButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/GPStool.gif")));
        gpstoolButton1.setToolTipText("Time Of Week");
        gpstoolButton1.setFocusPainted(false);
        gpstoolButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpstoolButton1ActionPerformed(evt);
            }
        });

        jToolBar1.add(gpstoolButton1);

        coordinatetoolButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/coordtool.gif")));
        coordinatetoolButton.setToolTipText("Geodetic/ECEF Conversion");
        coordinatetoolButton.setFocusPainted(false);
        coordinatetoolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coordinatetoolButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(coordinatetoolButton);

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator6.setMaximumSize(new java.awt.Dimension(1, 25));
        jToolBar1.add(jSeparator6);

        coordinatetoolButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/coordtool.gif")));
        coordinatetoolButton1.setToolTipText("Geodetic DIstance Calculator");
        coordinatetoolButton1.setFocusPainted(false);
        coordinatetoolButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coordinatetoolButton1ActionPerformed(evt);
            }
        });

        jToolBar1.add(coordinatetoolButton1);

        solartoolButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/solartool.gif")));
        solartoolButton.setToolTipText("Daily Solar Tool");
        solartoolButton.setFocusPainted(false);
        solartoolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solartoolButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(solartoolButton);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator5.setMaximumSize(new java.awt.Dimension(1, 25));
        jToolBar1.add(jSeparator5);

        solartoolButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/solartool.gif")));
        solartoolButton1.setToolTipText("Solar Plotter");
        solartoolButton1.setFocusPainted(false);
        solartoolButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solartoolButton1ActionPerformed(evt);
            }
        });

        jToolBar1.add(solartoolButton1);

        lunartoolButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/lunartool.gif")));
        lunartoolButton.setToolTipText("Lunar Tool");
        lunartoolButton.setFocusPainted(false);
        lunartoolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lunartoolButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(lunartoolButton);

        siderealtoolButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/siderealtool.gif")));
        siderealtoolButton.setToolTipText("Sidereal Tool");
        siderealtoolButton.setFocusPainted(false);
        siderealtoolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siderealtoolButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(siderealtoolButton);

        utilitiestoolButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/utilitiestool.gif")));
        utilitiestoolButton.setToolTipText("Number Conversions");
        utilitiestoolButton.setFocusPainted(false);
        utilitiestoolButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilitiestoolButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(utilitiestoolButton);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator4.setMaximumSize(new java.awt.Dimension(1, 25));
        jToolBar1.add(jSeparator4);

        utilitiestoolButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/utilitiestool.gif")));
        utilitiestoolButton1.setToolTipText("Color Chooser");
        utilitiestoolButton1.setFocusPainted(false);
        utilitiestoolButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilitiestoolButton1ActionPerformed(evt);
            }
        });

        jToolBar1.add(utilitiestoolButton1);

        defaultPreferencesButton.setText("Defaults");
        defaultPreferencesButton.setToolTipText("Default Preferences");
        defaultPreferencesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultPreferencesButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(defaultPreferencesButton);

        helpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/Help16.gif")));
        helpButton.setToolTipText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(helpButton);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        getContentPane().add(desktopPane, java.awt.BorderLayout.CENTER);

        toolMenu.setText("Tools");
        TimeTools.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/timetool.gif")));
        TimeTools.setText("Time Tools");
        TimeTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/timetool.gif")));
        TimeTool.setText("Time Analysis");
        TimeTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeToolActionPerformed(evt);
            }
        });

        TimeTools.add(TimeTool);

        TimeIntervalTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/timetool.gif")));
        TimeIntervalTool.setText("Time Interval Analysis");
        TimeIntervalTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeIntervalToolActionPerformed(evt);
            }
        });

        TimeTools.add(TimeIntervalTool);

        toolMenu.add(TimeTools);

        gpsTools.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/GPStool.gif")));
        gpsTools.setText("GPS Tools");
        gpsTimetool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/GPStool.gif")));
        gpsTimetool.setText("GPS Parameters");
        gpsTimetool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpsTimetoolActionPerformed(evt);
            }
        });

        gpsTools.add(gpsTimetool);

        gpsTimeofweektool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/GPStool.gif")));
        gpsTimeofweektool.setText("Time Of Week");
        gpsTimeofweektool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpsTimeofweektoolActionPerformed(evt);
            }
        });

        gpsTools.add(gpsTimeofweektool);

        toolMenu.add(gpsTools);

        coordinateTools.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/coordtool.gif")));
        coordinateTools.setText("Coordinate Tools");
        geodetic_ECEF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/coordtool.gif")));
        geodetic_ECEF.setText("Geodetic / ECEF");
        geodetic_ECEF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geodetic_ECEFActionPerformed(evt);
            }
        });

        coordinateTools.add(geodetic_ECEF);

        geodeticDistance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/coordtool.gif")));
        geodeticDistance.setText("Geodetic Distance Calculator");
        geodeticDistance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geodeticDistanceActionPerformed(evt);
            }
        });

        coordinateTools.add(geodeticDistance);

        toolMenu.add(coordinateTools);

        solarTools.setText("Solar Tools");
        solarTools.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/solartool.gif")));
        dailySolarTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/solartool.gif")));
        dailySolarTool.setText("Daily Solar Tool");
        dailySolarTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dailySolarToolActionPerformed(evt);
            }
        });

        solarTools.add(dailySolarTool);

        solarPlotter.setText("Solar Plotter");
        solarPlotter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/solartool.gif")));
        solarPlotter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solarPlotterActionPerformed(evt);
            }
        });

        solarTools.add(solarPlotter);

        toolMenu.add(solarTools);

        lunarToolFrame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/lunartool.gif")));
        lunarToolFrame.setText("Lunar Tools");
        lunarToolFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lunarToolFrameActionPerformed(evt);
            }
        });

        toolMenu.add(lunarToolFrame);

        siderealToolFrame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/siderealtool.gif")));
        siderealToolFrame.setText("Sidereal and Nutation Tool");
        siderealToolFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siderealToolFrameActionPerformed(evt);
            }
        });

        toolMenu.add(siderealToolFrame);

        utilitiestool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/utilitiestool.gif")));
        utilitiestool.setText("Utilities");
        colorchooserTool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/utilitiestool.gif")));
        colorchooserTool.setText("Color Chooser");
        colorchooserTool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorchooserToolActionPerformed(evt);
            }
        });

        utilitiestool.add(colorchooserTool);

        numberConversiontool.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/utilitiestool.gif")));
        numberConversiontool.setText("Number Conversions");
        numberConversiontool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberConversiontoolActionPerformed(evt);
            }
        });

        utilitiestool.add(numberConversiontool);

        toolMenu.add(utilitiestool);

        toolMenu.add(jSeparator1);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        toolMenu.add(exitMenuItem);

        menuBar.add(toolMenu);

        optionsMenu.setText("Options");
        showToolbarCheckBox.setSelected(true);
        showToolbarCheckBox.setText("Show Toolbar");
        showToolbarCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showToolbarCheckBoxActionPerformed(evt);
            }
        });

        optionsMenu.add(showToolbarCheckBox);

        preferences.setText("Preferences ...");
        preferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesActionPerformed(evt);
            }
        });

        optionsMenu.add(preferences);

        menuBar.add(optionsMenu);

        helpMenu.setText("Help");
        helpMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/Help16.gif")));
        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(helpMenuItem);

        helpMenu.add(jSeparator7);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-803)/2, (screenSize.height-667)/2, 803, 667);
    }//GEN-END:initComponents

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        helpMenuItemActionPerformed(evt);
    }//GEN-LAST:event_helpButtonActionPerformed

    private void defaultPreferencesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultPreferencesButtonActionPerformed
        preferencesActionPerformed(evt);
    }//GEN-LAST:event_defaultPreferencesButtonActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        HelpFrame hf = new HelpFrame();
        if (hf.shouldDisplayHelp()){
            showInternalFrame(hf);
            try{
                hf.setMaximum(true);
            }catch(java.beans.PropertyVetoException pve){
                javax.swing.JOptionPane.showMessageDialog(this,"Can't Maximize Help Frame!");
            }
        }
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void preferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesActionPerformed
        // Display the preferences dialog and 
        preferencesDialog pd = new preferencesDialog(ToolBoxApp.this, true, this.getClass());
        pd.setTitle("Default Preferences");
        
        pd.setVisible(true);
        if(pd.isUpdated()){
            // set the preferences in the store
            prefs.putDouble(latitudePref,pd.getLatitude());
            prefs.putDouble(longitudePref, pd.getLongitude());      
            prefs.putDouble(heightPref,pd.getHeightAMSL());
            prefs.putDouble(timeOffsetPref, pd.getTimeOffset());
        }
        
    }//GEN-LAST:event_preferencesActionPerformed

    private void coordinatetoolButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coordinatetoolButton1ActionPerformed
        GeodeticDistanceFrame gdf = new GeodeticDistanceFrame(false);
        showInternalFrame(gdf);
    }//GEN-LAST:event_coordinatetoolButton1ActionPerformed

    private void geodeticDistanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geodeticDistanceActionPerformed
        GeodeticDistanceFrame gdf = new GeodeticDistanceFrame(false);
        showInternalFrame(gdf);
    }//GEN-LAST:event_geodeticDistanceActionPerformed

    private void solartoolButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solartoolButton1ActionPerformed
        DurationSolarFrame Frame = new DurationSolarFrame(false);
        showInternalFrame(Frame);
    }//GEN-LAST:event_solartoolButton1ActionPerformed

    private void solarPlotterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solarPlotterActionPerformed
        DurationSolarFrame Frame = new DurationSolarFrame(false);
        showInternalFrame(Frame);
    }//GEN-LAST:event_solarPlotterActionPerformed

    private void timetoolButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timetoolButton1ActionPerformed
        TimeIntervalFrame tf = new TimeIntervalFrame(false);
        showInternalFrame(tf);
    }//GEN-LAST:event_timetoolButton1ActionPerformed

    private void gpstoolButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpstoolButton1ActionPerformed
        GPSTimeOfWeekFrame GPSFrame = new GPSTimeOfWeekFrame(false);
        showInternalFrame(GPSFrame);
    }//GEN-LAST:event_gpstoolButton1ActionPerformed

    private void utilitiestoolButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilitiestoolButton1ActionPerformed
        ColorChooserFrame f = new ColorChooserFrame(false);
        showInternalFrame(f);
    }//GEN-LAST:event_utilitiestoolButton1ActionPerformed

    private void colorchooserToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorchooserToolActionPerformed
        ColorChooserFrame f = new ColorChooserFrame(false);
        showInternalFrame(f);
    }//GEN-LAST:event_colorchooserToolActionPerformed

    private void numberConversiontoolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberConversiontoolActionPerformed
        NumberConversionFrame ncf = new NumberConversionFrame(false);
        showInternalFrame(ncf);
    }//GEN-LAST:event_numberConversiontoolActionPerformed

    private void utilitiestoolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilitiestoolButtonActionPerformed
        NumberConversionFrame ncf = new NumberConversionFrame(false);
        showInternalFrame(ncf);
    }//GEN-LAST:event_utilitiestoolButtonActionPerformed

    private void gpsTimeofweektoolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpsTimeofweektoolActionPerformed
        GPSTimeOfWeekFrame GPSFrame = new GPSTimeOfWeekFrame(false);
        showInternalFrame(GPSFrame);
    }//GEN-LAST:event_gpsTimeofweektoolActionPerformed

    private void gpstoolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpstoolButtonActionPerformed
        GPSToolFrame GPSFrame = new GPSToolFrame(false);
        showInternalFrame(GPSFrame);
    }//GEN-LAST:event_gpstoolButtonActionPerformed

    private void gpsTimetoolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpsTimetoolActionPerformed
        GPSToolFrame GPSFrame = new GPSToolFrame(false);
        showInternalFrame(GPSFrame);
    }//GEN-LAST:event_gpsTimetoolActionPerformed

    private void siderealtoolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siderealtoolButtonActionPerformed
        SiderealToolFrame SDFrame = new SiderealToolFrame(false);
        showInternalFrame(SDFrame);
    }//GEN-LAST:event_siderealtoolButtonActionPerformed

    private void lunartoolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lunartoolButtonActionPerformed
        LunarToolFrame Frame = new LunarToolFrame(false);
        showInternalFrame(Frame);
    }//GEN-LAST:event_lunartoolButtonActionPerformed

    private void solartoolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solartoolButtonActionPerformed
        SolarRiseSetFrame rsFrame = new SolarRiseSetFrame(false);
        showInternalFrame(rsFrame);
    }//GEN-LAST:event_solartoolButtonActionPerformed

    private void coordinatetoolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coordinatetoolButtonActionPerformed
        Geodetic_ECEFFrame ge = new Geodetic_ECEFFrame(false);
        showInternalFrame(ge);
    }//GEN-LAST:event_coordinatetoolButtonActionPerformed

    private void timetoolButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timetoolButtonActionPerformed
        TimeFrame tf = new TimeFrame(false);
        showInternalFrame(tf);
    }//GEN-LAST:event_timetoolButtonActionPerformed

    private void showToolbarCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showToolbarCheckBoxActionPerformed
        if(showToolbarCheckBox.isSelected()){
            jToolBar1.setVisible(true);
        }else{
            jToolBar1.setVisible(false);
        }
    }//GEN-LAST:event_showToolbarCheckBoxActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        ToolBoxApp_AboutBox dlg = new ToolBoxApp_AboutBox(ToolBoxApp.this);
        Dimension dlgSize = dlg.getPreferredSize();
        Dimension frmSize = getSize();
        Point loc = getLocation();
        dlg.setLocation((frmSize.width - dlgSize.width) / 2 + loc.x, (frmSize.height - dlgSize.height) / 2 + loc.y);
        dlg.setModal(true);
        dlg.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void dailySolarToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dailySolarToolActionPerformed
        SolarRiseSetFrame rsFrame = new SolarRiseSetFrame(false);
        showInternalFrame(rsFrame);
    }//GEN-LAST:event_dailySolarToolActionPerformed

    private void lunarToolFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lunarToolFrameActionPerformed
        LunarToolFrame Frame = new LunarToolFrame(false);
        showInternalFrame(Frame);
    }//GEN-LAST:event_lunarToolFrameActionPerformed

    private void siderealToolFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siderealToolFrameActionPerformed
        SiderealToolFrame SDFrame = new SiderealToolFrame(false);
        showInternalFrame(SDFrame);
    }//GEN-LAST:event_siderealToolFrameActionPerformed

    private void geodetic_ECEFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geodetic_ECEFActionPerformed
        Geodetic_ECEFFrame ge = new Geodetic_ECEFFrame(false);
        showInternalFrame(ge);
    }//GEN-LAST:event_geodetic_ECEFActionPerformed

    private void TimeIntervalToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeIntervalToolActionPerformed
        TimeIntervalFrame tf = new TimeIntervalFrame(false);
        showInternalFrame(tf);
    }//GEN-LAST:event_TimeIntervalToolActionPerformed

    private void TimeToolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeToolActionPerformed
        TimeFrame tf = new TimeFrame(false);
        showInternalFrame(tf);
    }//GEN-LAST:event_TimeToolActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try{
          //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
          //UIManager.setLookAndFeel("javax.swing.plaf.basic.BasicLookAndFeel");
          //UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
          UIManager.setLookAndFeel(new com.incors.plaf.kunststoff.KunststoffLookAndFeel());
        }catch(Exception e) {
            e.printStackTrace();
        }
        ToolBoxApp.app = new ToolBoxApp();
        
        Thread kicker = new Thread(ToolBoxApp.app);
        kicker.start();
//        jd = new T_JulianDate();
//        timer1.start();
                
        ToolBoxApp.app.setVisible(true);
    }
    
    public void run() {
        JWindow splash = new JWindow();
        splash.getContentPane().add(new splashPane2(),BorderLayout.CENTER);
        splash.setSize(402,123);
        // Center the splash
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension splashSize = splash.getSize();
        if (splashSize.height > screenSize.height) {
          splashSize.height = screenSize.height;
        }
        if (splashSize.width > screenSize.width) {
          splashSize.width = screenSize.width;
        }
        splash.setLocation((screenSize.width - splashSize.width) / 2, (screenSize.height - splashSize.height) / 2);
        splash.setVisible(true);
        // Show banner for 2 seconds
        try{
            Thread.sleep(2000);
        }catch(InterruptedException ie){
        }
        splash.setVisible(false);        
    }
        
    public static void decrementFrameCount() {
        frameCount--;
        if(frameCount < 0 ) frameCount = 0;
        if(frameCount == 1){
            statusFieldLeft.setText(frameCount + " window open");
        }else{
            statusFieldLeft.setText(frameCount + " windows open");
        }
    }

    
//    private static void updateStatusRight(){
//        statusFieldRight.setText(jd.toMediumString());
//    }
    
    private void showInternalFrame(javax.swing.JInternalFrame frame){
        desktopPane.add(frame);
        frame.setLocation(24*frameCount, 24*frameCount);
        frame.show();
        frameCount++;
        if(frameCount == 1){
            statusFieldLeft.setText(frameCount + " window open");
        }else{
            statusFieldLeft.setText(frameCount + " windows open");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem TimeIntervalTool;
    private javax.swing.JMenuItem TimeTool;
    private javax.swing.JMenu TimeTools;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem colorchooserTool;
    private javax.swing.JMenu coordinateTools;
    private javax.swing.JButton coordinatetoolButton;
    private javax.swing.JButton coordinatetoolButton1;
    private javax.swing.JMenuItem dailySolarTool;
    private javax.swing.JButton defaultPreferencesButton;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem geodeticDistance;
    private javax.swing.JMenuItem geodetic_ECEF;
    private javax.swing.JMenuItem gpsTimeofweektool;
    private javax.swing.JMenuItem gpsTimetool;
    private javax.swing.JMenu gpsTools;
    private javax.swing.JButton gpstoolButton;
    private javax.swing.JButton gpstoolButton1;
    private javax.swing.JButton helpButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem lunarToolFrame;
    private javax.swing.JButton lunartoolButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem numberConversiontool;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JMenuItem preferences;
    private javax.swing.JCheckBoxMenuItem showToolbarCheckBox;
    private javax.swing.JMenuItem siderealToolFrame;
    private javax.swing.JButton siderealtoolButton;
    private javax.swing.JMenuItem solarPlotter;
    private javax.swing.JMenu solarTools;
    private javax.swing.JButton solartoolButton;
    private javax.swing.JButton solartoolButton1;
    private static javax.swing.JTextField statusFieldLeft;
    private static javax.swing.JTextField statusFieldRight;
    private javax.swing.JButton timetoolButton;
    private javax.swing.JButton timetoolButton1;
    private javax.swing.JMenu toolMenu;
    private javax.swing.JMenu utilitiestool;
    private javax.swing.JButton utilitiestoolButton;
    private javax.swing.JButton utilitiestoolButton1;
    // End of variables declaration//GEN-END:variables
 
    private class ToolBoxApp_AboutBox extends JDialog implements ActionListener {
     JPanel aboutPane = new splashPane2();
     JButton button1 = new JButton("Close");
      
      public ToolBoxApp_AboutBox(Frame parent) {
        super(parent);
        enableEvents(AWTEvent.WINDOW_EVENT_MASK);
        try {
          Init();
        }
        catch(Exception e) {
          e.printStackTrace();
        }
      }
      /**Component initialization*/
      private void Init() throws Exception  {
        this.setTitle("About Ted's Toolbox");
        this.setResizable(false);       
        this.setSize(402,163);
        button1.addActionListener(this);
        this.getContentPane().add(aboutPane, BorderLayout.CENTER);
        this.getContentPane().add(button1, BorderLayout.SOUTH);
    }
      /**Overridden so we can exit when window is closed*/
      protected void processWindowEvent(WindowEvent e) {
        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
          cancel();
        }
        super.processWindowEvent(e);
      }
      /**Close the dialog*/
      void cancel() {
        dispose();
      }
      /**Close the dialog on a button event*/
      public void actionPerformed(ActionEvent e) {
        if (e.getSource() == button1) {
          cancel();
        }
      }      
    }// end of class ToolBoxApp_AboutBox
}
