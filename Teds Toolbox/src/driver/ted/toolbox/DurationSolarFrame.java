/*
 * SolarRiseSetFrame.java
 *
 * Created on September 4, 2002, 8:36 AM
 */
package driver.ted.toolbox;
import driver.ted.astro.T_RiseSet;
import driver.ted.astro.T_SolarCoords;
import driver.ted.utilities.T_JulianDate;
import driver.ted.utilities.T_Utilities;
import java.util.prefs.Preferences;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;

/**
 *
 * @author  tdriver
 */
public class DurationSolarFrame extends javax.swing.JInternalFrame implements Runnable {
    
    T_RiseSet RS;
    JFileChooser fc;
    Preferences prefs;
    boolean isApplet;
    final String latitudePref = "Latitude";
    final String longitudePref = "Longitude";
    final String timeOffsetPref = "TimeOffset";
    // double arrays to hold the numeric values of the metrics
    double angles[][], times[][];
    // string array to hold the string values of the time metrics
    String timeLabels[][];
    // array of bools to set to send to the Solar Plotter so it knows what was calculated
    boolean whatToPlot[] = {true, true, true, true, true, true, true};
    
    java.io.File outputFile;
    java.io.BufferedWriter out;
    
    
    /** Creates new form SolarRiseSetFrame */
    public DurationSolarFrame(boolean applet) {
        initComponents();        
        isApplet = applet;
        if(!isApplet){
            prefs = Preferences.userNodeForPackage(this.getClass());
            checkForStoredPreferences();
        }
        if(isApplet){
            saveOutputDataCheckbox.setEnabled(false);
            saveOutputDataCheckbox.setSelected(false);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        timeOffsetInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        outputTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        saveOutputDataCheckbox = new javax.swing.JCheckBox();
        calculateButton = new javax.swing.JButton();
        plotDataButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        checkRiseTime = new javax.swing.JCheckBox();
        checkTransitTime = new javax.swing.JCheckBox();
        checkSetTime = new javax.swing.JCheckBox();
        checkRiseAzimuth = new javax.swing.JCheckBox();
        checkTransitElevation = new javax.swing.JCheckBox();
        checkSetAzimuth = new javax.swing.JCheckBox();
        checkAmountOfDaylight = new javax.swing.JCheckBox();
        checkDate = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        startDate = new driver.ted.beans.TimeDate.DateInputBean();
        stopDate = new driver.ted.beans.TimeDate.DateInputBean();
        locationInputBean1 = new driver.ted.beans.Location.LocationInputBean();
        jButton3 = new javax.swing.JButton();
        showOutputsCheckBox = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jCheckBox2 = new javax.swing.JCheckBox();
        jProgressBar1 = new javax.swing.JProgressBar();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 51)));
        setClosable(true);
        setIconifiable(true);
        setTitle("Solar Plotter");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/solartool.gif")));
        setMaximumSize(getPreferredSize());
        setMinimumSize(getPreferredSize());
        setPreferredSize(new java.awt.Dimension(582, 484));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Start Date:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 110, -1));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Stop Date:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 110, -1));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder("Time Offset"));
        jPanel1.setToolTipText("Set the time offset to be applied to the calculation");
        timeOffsetInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timeOffsetInput.setText("0");
        timeOffsetInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeOffsetInputActionPerformed(evt);
            }
        });

        jPanel1.add(timeOffsetInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 50, -1));

        jLabel2.setText("hours from GMT");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 110, 60));

        browseButton.setText("Browse ...");
        browseButton.setToolTipText("Select and Output data file");
        browseButton.setEnabled(false);
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        getContentPane().add(browseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 320, -1, -1));

        outputTextField.setEditable(false);
        outputTextField.setToolTipText("Output data file");
        getContentPane().add(outputTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 350, 330, -1));

        jLabel3.setText("Output File:");
        jLabel3.setEnabled(false);
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 330, 110, -1));

        saveOutputDataCheckbox.setText("Save Output Data");
        saveOutputDataCheckbox.setToolTipText("Save the output data to a file");
        saveOutputDataCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOutputDataCheckboxActionPerformed(evt);
            }
        });

        getContentPane().add(saveOutputDataCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 300, -1, 20));

        calculateButton.setText("Calculate");
        calculateButton.setToolTipText("Perform the calculation");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        getContentPane().add(calculateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 220, 110, -1));

        plotDataButton.setText("Plot Data");
        plotDataButton.setToolTipText("Plot calculated data");
        plotDataButton.setEnabled(false);
        plotDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotDataButtonActionPerformed(evt);
            }
        });

        getContentPane().add(plotDataButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 220, 110, -1));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder("Outputs"));
        jPanel2.setToolTipText("Select which outputs to view");
        checkRiseTime.setSelected(true);
        checkRiseTime.setText("Rise Time");
        checkRiseTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkRiseTimeActionPerformed(evt);
            }
        });

        jPanel2.add(checkRiseTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        checkTransitTime.setSelected(true);
        checkTransitTime.setText("Transit Time");
        checkTransitTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTransitTimeActionPerformed(evt);
            }
        });

        jPanel2.add(checkTransitTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, -1));

        checkSetTime.setSelected(true);
        checkSetTime.setText("Set Time");
        checkSetTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSetTimeActionPerformed(evt);
            }
        });

        jPanel2.add(checkSetTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        checkRiseAzimuth.setSelected(true);
        checkRiseAzimuth.setText("Rise Azimuth");
        checkRiseAzimuth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkRiseAzimuthActionPerformed(evt);
            }
        });

        jPanel2.add(checkRiseAzimuth, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, -1, -1));

        checkTransitElevation.setSelected(true);
        checkTransitElevation.setText("Transit Elevation");
        checkTransitElevation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTransitElevationActionPerformed(evt);
            }
        });

        jPanel2.add(checkTransitElevation, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 90, -1, -1));

        checkSetAzimuth.setSelected(true);
        checkSetAzimuth.setText("Set Azimuth");
        checkSetAzimuth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSetAzimuthActionPerformed(evt);
            }
        });

        jPanel2.add(checkSetAzimuth, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 120, -1, -1));

        checkAmountOfDaylight.setSelected(true);
        checkAmountOfDaylight.setText("Amount Of Daylight");
        checkAmountOfDaylight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAmountOfDaylightActionPerformed(evt);
            }
        });

        jPanel2.add(checkAmountOfDaylight, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 140, -1));

        checkDate.setSelected(true);
        checkDate.setText("Date");
        jPanel2.add(checkDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 270, 160));

        jPanel3.setLayout(new java.awt.BorderLayout());

        jTextArea1.setEditable(false);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setMargin(new java.awt.Insets(0, 5, 0, 0));
        jScrollPane1.setViewportView(jTextArea1);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 647, 110));

        startDate.setToolTipText("Set the calculation start date");
        try {
            startDate.setYear(getCurrentYear());
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        startDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                startDatePropertyChange(evt);
            }
        });

        getContentPane().add(startDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        stopDate.setToolTipText("Set the calculation stop date");
        try {
            stopDate.setDay(31);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        try {
            stopDate.setMonth(12);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        try {
            stopDate.setYear(getCurrentYear());
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        stopDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                stopDatePropertyChange(evt);
            }
        });

        getContentPane().add(stopDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, -1, -1));

        locationInputBean1.setToolTipText("Select the Location for the calculation");
        locationInputBean1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                locationInputBean1PropertyChange(evt);
            }
        });

        getContentPane().add(locationInputBean1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 290, 190));

        jButton3.setText("Clear Window");
        jButton3.setToolTipText("Clear the window contents");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 500, -1, -1));

        showOutputsCheckBox.setSelected(true);
        showOutputsCheckBox.setText("Show Outputs");
        showOutputsCheckBox.setToolTipText("Check to see outputs in window below");
        getContentPane().add(showOutputsCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 180, -1, -1));

        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 290, 340, -1));

        jCheckBox2.setText("Include DST");
        jCheckBox2.setEnabled(false);
        getContentPane().add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, -1, -1));

        jProgressBar1.setStringPainted(true);
        getContentPane().add(jProgressBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 264, 340, 20));

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-666)/2, (screenSize.height-575)/2, 666, 575);
    }//GEN-END:initComponents

    private void startDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_startDatePropertyChange
        plotDataButton.setEnabled(false);
       // calculateButton.setEnabled(true);
        //T_JulianDate startJD = new T_JulianDate(startDate.getMonth(),startDate.getDay(), startDate.getYear(), 0,0,0);
        jProgressBar1.setValue(0);//(int)startJD.getJulianDate());
    }//GEN-LAST:event_startDatePropertyChange

    private void stopDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_stopDatePropertyChange
        plotDataButton.setEnabled(false);
        //calculateButton.setEnabled(true);
        //T_JulianDate startJD = new T_JulianDate(startDate.getMonth(),startDate.getDay(), startDate.getYear(), 0,0,0);
        jProgressBar1.setValue(0);//(int)startJD.getJulianDate());
    }//GEN-LAST:event_stopDatePropertyChange

    private void checkAmountOfDaylightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAmountOfDaylightActionPerformed
        if(checkAmountOfDaylight.isSelected()){
            whatToPlot[6] = true;
        }else{
            whatToPlot[6] = false;
        }
    }//GEN-LAST:event_checkAmountOfDaylightActionPerformed

    private void checkSetAzimuthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSetAzimuthActionPerformed
        if(checkSetAzimuth.isSelected()){
            whatToPlot[5] = true;
        }else{
            whatToPlot[5] = false;
        }
    }//GEN-LAST:event_checkSetAzimuthActionPerformed

    private void checkTransitElevationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTransitElevationActionPerformed
        if(checkTransitElevation.isSelected()){
            whatToPlot[4] = true;
        }else{
            whatToPlot[4] = false;
        }
    }//GEN-LAST:event_checkTransitElevationActionPerformed

    private void checkRiseAzimuthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkRiseAzimuthActionPerformed
        if (checkRiseAzimuth.isSelected()){
            whatToPlot[3] = true;
        }else{
            whatToPlot[3] = false;
        }
    }//GEN-LAST:event_checkRiseAzimuthActionPerformed

    private void checkSetTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSetTimeActionPerformed
        if (checkSetTime.isSelected()){
            whatToPlot[2] = true;
        }else{
            whatToPlot[2] = false;
        }
    }//GEN-LAST:event_checkSetTimeActionPerformed

    private void checkTransitTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTransitTimeActionPerformed
        if(checkTransitTime.isSelected()){
            whatToPlot[1] = true;
        }else{
            whatToPlot[1] = false;
        }
    }//GEN-LAST:event_checkTransitTimeActionPerformed

    private void checkRiseTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkRiseTimeActionPerformed
        if(checkRiseTime.isSelected()){
            whatToPlot[0] = true;
        }else{
            whatToPlot[0] = false;
        }        
    }//GEN-LAST:event_checkRiseTimeActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTextArea1.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
       // start the calculation process
        if(!isApplet){
            Thread thread = new Thread(this);
            thread.start();
        }else{
            run();
        }
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        fc = new javax.swing.JFileChooser();
        try{
            if(fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                outputTextField.setText(fc.getSelectedFile().getCanonicalPath());
                //calculateButton.setEnabled(true);
                //T_JulianDate startJD = new T_JulianDate(startDate.getMonth(),startDate.getDay(), startDate.getYear(), 0,0,0);
                jProgressBar1.setValue(0);//(int)startJD.getJulianDate());
                try{
                   out = new BufferedWriter(new FileWriter(fc.getSelectedFile().getPath()));
                }catch(IOException ioe){
                   ioe.printStackTrace();
                }
            }
        }catch(java.io.IOException ioe){
            javax.swing.JOptionPane.showMessageDialog(this, 
            "Unable to open file",
            "Error",
            javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void plotDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotDataButtonActionPerformed
        // Plot Data Button pushed
        if(!isApplet){
            SolarPlotData_1 frame = new SolarPlotData_1(angles, times, timeLabels, whatToPlot);
            //SolarPlotData frame = new SolarPlotData(angles, times, timeLabels, whatToPlot);
            frame.setVisible(true);
        }else{
            javax.swing.JOptionPane.showMessageDialog(this, 
            "Not Available in the Applet, only available in the Application",
            "Not Available",
            javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
//        Thread kicker = new Thread(frame);
//        kicker.start();
        
    }//GEN-LAST:event_plotDataButtonActionPerformed
    
    private void saveOutputDataCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOutputDataCheckboxActionPerformed
        if (saveOutputDataCheckbox.isSelected()){
            browseButton.setEnabled(true);
            jLabel3.setEnabled(true);
        }else{
            browseButton.setEnabled(false);
            jLabel3.setEnabled(false);
        }
        
    }//GEN-LAST:event_saveOutputDataCheckboxActionPerformed
    
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        if(!isApplet){
            driver.ted.toolbox.ToolBoxApp.decrementFrameCount();
        }else{
            driver.ted.toolbox.ToolBoxJPanel.decrementFrameCount();
        }
    }//GEN-LAST:event_formInternalFrameClosed
    
    private void timeOffsetInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeOffsetInputActionPerformed
        plotDataButton.setEnabled(false);
       // calculateButton.setEnabled(true);
        //T_JulianDate startJD = new T_JulianDate(startDate.getMonth(),startDate.getDay(), startDate.getYear(), 0,0,0);
        jProgressBar1.setValue(0);//(int)startJD.getJulianDate());
        //Check that Double.parseDouble(timeOffsetInput.getText()) Returns a number
    }//GEN-LAST:event_timeOffsetInputActionPerformed
        
    private void locationInputBean1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_locationInputBean1PropertyChange
        plotDataButton.setEnabled(false);
        //calculateButton.setEnabled(true);
        //T_JulianDate startJD = new T_JulianDate(startDate.getMonth(),startDate.getDay(), startDate.getYear(), 0,0,0);
        jProgressBar1.setValue(0);
    }//GEN-LAST:event_locationInputBean1PropertyChange
            
    private void checkForStoredPreferences(){
        try{
            if(contains(prefs,latitudePref))
                locationInputBean1.setLatitude(prefs.getDouble(latitudePref,0.0));
            if(contains(prefs,longitudePref))
                locationInputBean1.setLongitude(driver.ted.utilities.T_Utilities.normalize(-180, 180, prefs.getDouble(longitudePref,0.0)));
            if(contains(prefs,timeOffsetPref))
                timeOffsetInput.setText(new java.text.DecimalFormat("0.0").format(prefs.getFloat(timeOffsetPref,0)));
        }catch(java.beans.PropertyVetoException pve){
            javax.swing.JOptionPane.showMessageDialog(this,
            pve.getMessage(),
            "Error Setting Values from Preferences",
            javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private static boolean contains(Preferences node, String key){
        return node.get(key,null) != null;
    }
    
    public void run(){
        
        boolean finished = false;
        boolean atLeastOneSelected = false;
                
        T_JulianDate stopJD = new T_JulianDate(stopDate.getMonth(),stopDate.getDay(), stopDate.getYear(), 0,0,0);
        T_JulianDate startJD = new T_JulianDate(startDate.getMonth(),startDate.getDay(), startDate.getYear(), 0,0,0);
        double latitude = locationInputBean1.getLatitude();
        double longitude = locationInputBean1.getLongitude();
        double timeOffset = Double.parseDouble(timeOffsetInput.getText());
        // 4 columns are Date, Rise Azimuth, Transit Elevation and Set Azimuth
        angles = new double[((int)stopJD.getJulianDate() - (int)startJD.getJulianDate()) + 1][4];
        // 5 columns are Date, Rise Time, Transit Time, Set Time, Amount of Daylight 
        times = new double[((int)stopJD.getJulianDate() - (int)startJD.getJulianDate()) + 1][5];
        timeLabels = new String[((int)stopJD.getJulianDate() - (int)startJD.getJulianDate()) + 1][5];
        
        // do all data processing here
             double stop = stopJD.getJulianDate();
             StringBuffer buff = new StringBuffer();
             T_JulianDate iterator = startJD;
             // set progress bar
             jProgressBar1.setMinimum((int)startJD.getJulianDate());
             jProgressBar1.setMaximum((int)stop);
             jTextArea1.append("Calculating...\n");
             
             java.text.DecimalFormat df = new java.text.DecimalFormat("0.00"); 
             
             if(showOutputsCheckBox.isSelected()){
                 
                 // write the header
                 if(checkDate.isSelected()){
                     jTextArea1.append("Date\t"); 
                     atLeastOneSelected = true;
                 }
                 if(checkRiseTime.isSelected()){
                     jTextArea1.append("Rise Time\t");
                     atLeastOneSelected = true;
                 }
                 if(checkTransitTime.isSelected()){
                     jTextArea1.append("Transit Time\t");
                     atLeastOneSelected = true;
                 }
                 if(checkSetTime.isSelected()){
                     jTextArea1.append("Set Time\t");
                     atLeastOneSelected = true;
                 }
                 if(checkRiseAzimuth.isSelected()){
                     jTextArea1.append("Rise Azimuth\t");
                     atLeastOneSelected = true;
                 }
                 if(checkTransitElevation.isSelected()){
                     jTextArea1.append("Transit Elev\t");
                     atLeastOneSelected = true;
                 }
                 if(checkSetAzimuth.isSelected()){
                     jTextArea1.append("Set Azimuth\t");
                     atLeastOneSelected = true;
                 }
                 if(checkAmountOfDaylight.isSelected()){
                     jTextArea1.append("Amount of Daylight");
                     atLeastOneSelected = true;
                 }

                 if(atLeastOneSelected){
                     // append a newline character
                    jTextArea1.append("\n");
                   }
             }
             
             if(saveOutputDataCheckbox.isSelected()){
                 
                 // write the header
                 if(checkDate.isSelected()){
                     buff.append("Date\t");
                     atLeastOneSelected = true;
                 }
                 if(checkRiseTime.isSelected()){
                     buff.append("Rise Time\t");
                     atLeastOneSelected = true;
                 }
                 if(checkTransitTime.isSelected()){
                     buff.append("Transit Time\t");
                     atLeastOneSelected = true;
                 }
                 if(checkSetTime.isSelected()){
                     buff.append("Set Time\t");
                     atLeastOneSelected = true;
                 }
                 if(checkRiseAzimuth.isSelected()){
                     buff.append("Rise Azimuth\t");
                     atLeastOneSelected = true;
                 }
                 if(checkTransitElevation.isSelected()){
                     buff.append("Transit Elev\t");
                     atLeastOneSelected = true;
                 }
                 if(checkSetAzimuth.isSelected()){
                     buff.append("Set Azimuth\t");
                     atLeastOneSelected = true;
                 }
                 if(checkAmountOfDaylight.isSelected()){
                     buff.append("Amount of Daylight");
                     atLeastOneSelected = true;
                 }

                 if(atLeastOneSelected){
                     // append a newline character
                    buff.append("\n");
                 }
             }
             int index = 0;
             do{
                 RS = new T_RiseSet(iterator,latitude,longitude,(float)timeOffset,T_RiseSet.SUN);
                 // update the progress bar
                 jProgressBar1.setValue((int)iterator.getJulianDate());
                 angles[index][0] = iterator.getJulianDate();
                 angles[index][1] = RS.getRiseAzimuth();
                 angles[index][2] = RS.getTransitElevation();
                 angles[index][3] = RS.getSetAzimuth();
                 times[index][0] = iterator.getJulianDate();
                 times[index][1] = RS.getRiseTimeDouble();
                 times[index][2] = RS.getTransitTimeDouble();
                 times[index][3] = RS.getSetTimeDouble();
                 times[index][4] = RS.getAmountOfDaylightDouble();
                 timeLabels[index][0] = iterator.getDate().toString();
                 timeLabels[index][1] = RS.getRiseTime();
                 timeLabels[index][2] = RS.getTransitTime();
                 timeLabels[index][3] = RS.getSetTime();
                 timeLabels[index][4] = RS.getAmountOfDaylight();
                 
                 
                 if(showOutputsCheckBox.isSelected()){
                     // append the date
                     if(checkDate.isSelected()){
                         jTextArea1.append(iterator.getDate().toString()+"\t"); 
                     }                

                     // check the data to output
                     if(checkRiseTime.isSelected()){
                        jTextArea1.append(timeLabels[index][1]+"\t");
                     }
                     if(checkTransitTime.isSelected()){
                         jTextArea1.append(timeLabels[index][2]+"\t");
                     }
                     if(checkSetTime.isSelected()){
                         jTextArea1.append(timeLabels[index][3]+"\t");
                     }
                     if(checkRiseAzimuth.isSelected()){
                         jTextArea1.append(df.format(angles[index][1])+"\t");
                     }
                     if(checkTransitElevation.isSelected()){
                         jTextArea1.append(df.format(angles[index][2])+"\t");
                     }
                     if(checkSetAzimuth.isSelected()){
                         jTextArea1.append(df.format(angles[index][3])+"\t");
                     }
                     if(checkAmountOfDaylight.isSelected()){
                         jTextArea1.append(timeLabels[index][4]);
                     }
                     // output a newline character
                     if(atLeastOneSelected){
                        jTextArea1.append("\n");
                     }
                 }
                 // somehow scroll the message window here
  //               jScrollPane1.getViewport().scrollRectToVisible(jScrollPane1.getViewport().
//
                 
                 if(saveOutputDataCheckbox.isSelected()){
                     // append the date
                     if(checkDate.isSelected()){
                         buff.append(iterator.getDate().toString()+"\t"); 
                     }               

                     // check the data to output
                     if(checkRiseTime.isSelected()){
                        buff.append(timeLabels[index][1]+"\t");
                     }
                     if(checkTransitTime.isSelected()){
                         buff.append(timeLabels[index][2]+"\t");
                     }
                     if(checkSetTime.isSelected()){
                         buff.append(timeLabels[index][3]+"\t");
                     }
                     if(checkRiseAzimuth.isSelected()){
                         buff.append(df.format(angles[index][1])+"\t");
                     }
                     if(checkTransitElevation.isSelected()){
                         buff.append(df.format(angles[index][2])+"\t");
                     }
                     if(checkSetAzimuth.isSelected()){
                         buff.append(df.format(angles[index][3])+"\t");
                     }
                     if(checkAmountOfDaylight.isSelected()){
                         buff.append(timeLabels[index][4]);
                     }
                     // output a newline character
                     if(atLeastOneSelected){
                        buff.append("\n");
                     }
                     
                     // try writing to the file
                     try{
                        out.write(buff.toString());
                     }catch(java.io.IOException ioe){
                       javax.swing.JOptionPane.showMessageDialog(this,
                        "Error: No Open File!",
                        "Error Writing to File",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                       finished = true;
                    }
                    buff.setLength(0);
                 }   
                 
                if(iterator.getJulianDate() >= stop){
                   finished = true;
                }
                iterator = new T_JulianDate(iterator.getJulianDate() + 1.0);
                index++;
             }while(!finished);
             
             jTextArea1.append("Complete\n");
             
             plotDataButton.setEnabled(true);
            // calculateButton.setEnabled(false);
            // end data processing
            // finish the file and status stuff
            if(saveOutputDataCheckbox.isSelected()){
                try{
                    out.close();
                    outputTextField.setText("File " + fc.getSelectedFile().getName()+ " Saved");
                    saveOutputDataCheckbox.setSelected(false);
                    saveOutputDataCheckboxActionPerformed(null);                    
                }catch(java.io.IOException ioe){
                 javax.swing.JOptionPane.showMessageDialog(this,
                    "Error! " + ioe,
                    "Error Closing File",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
    }
    
    public int getCurrentYear() {
        return new T_JulianDate().getDate().getYear();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton calculateButton;
    private javax.swing.JCheckBox checkAmountOfDaylight;
    private javax.swing.JCheckBox checkDate;
    private javax.swing.JCheckBox checkRiseAzimuth;
    private javax.swing.JCheckBox checkRiseTime;
    private javax.swing.JCheckBox checkSetAzimuth;
    private javax.swing.JCheckBox checkSetTime;
    private javax.swing.JCheckBox checkTransitElevation;
    private javax.swing.JCheckBox checkTransitTime;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private driver.ted.beans.Location.LocationInputBean locationInputBean1;
    private javax.swing.JTextField outputTextField;
    private javax.swing.JButton plotDataButton;
    private javax.swing.JCheckBox saveOutputDataCheckbox;
    private javax.swing.JCheckBox showOutputsCheckBox;
    private driver.ted.beans.TimeDate.DateInputBean startDate;
    private driver.ted.beans.TimeDate.DateInputBean stopDate;
    private javax.swing.JTextField timeOffsetInput;
    // End of variables declaration//GEN-END:variables
    
}
