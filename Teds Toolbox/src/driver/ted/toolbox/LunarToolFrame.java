/*
 * LunarToolFrame.java
 *
 * Created on September 10, 2002, 2:18 PM
 * Changes for version 2.11 added time offset calculation to the Lunar phase calculation (also made change to T_Algorithms)
 */

package driver.ted.toolbox;
import driver.ted.astro.T_RiseSet;
import driver.ted.astro.T_LunarCoords;
import driver.ted.utilities.T_Utilities;
import driver.ted.utilities.T_JulianDate;
import driver.ted.utilities.T_Coordinates;
import java.util.prefs.Preferences;
import java.awt.event.*;

/**
 *
 * @author  tdriver
 */
public class LunarToolFrame extends javax.swing.JInternalFrame {
    
    T_RiseSet RS;
    T_LunarCoords LC = new T_LunarCoords();
    T_JulianDate jd = new T_JulianDate();
    Preferences prefs;
    double activeLongitude;
    double activeLatitude;
    double activeTimeOffset;
    boolean isApplet;
    
    javax.swing.Timer timer1 = new javax.swing.Timer(1000,new ActionListener(){
      public void actionPerformed(ActionEvent evt) {
          jd.advance(0,0,0,0,0,1);
          //LC = new T_LunarCoords(jd); // moved this line to the updateActive function
          updateActive();
        }
      }); 
      
    final String latitudePref = "Latitude";
    final String longitudePref = "Longitude";
    final String timeOffsetPref = "TimeOffset";
    
    /** Creates new form LunarRiseSetFrame */
    public LunarToolFrame(boolean applet) {
        isApplet = applet;
        initComponents();
        if(!isApplet){
            prefs = Preferences.userNodeForPackage(this.getClass());
            checkForStoredPreferences();
        }
        updateActive();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        julianDateInputBean1 = new driver.ted.beans.TimeDate.JulianDateInputBean();
        jButton2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        activeTimeField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        activeLatField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        activeLonField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        activeTOField = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        activeDateField = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        RiseAzField = new javax.swing.JTextField();
        MaxElevationField = new javax.swing.JTextField();
        SetAzField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        riseField = new javax.swing.JTextField();
        transitField = new javax.swing.JTextField();
        setField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        amountOfMoonlightField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        lastQuarterField = new javax.swing.JTextField();
        newMoonField = new javax.swing.JTextField();
        firstQuarterField = new javax.swing.JTextField();
        fullMoonField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        moonPicture = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        raField = new javax.swing.JTextField();
        declinationField = new javax.swing.JTextField();
        jToggleButton1 = new javax.swing.JToggleButton();
        azField = new javax.swing.JTextField();
        elevationField = new javax.swing.JTextField();
        dateTimeSpinnerBean1 = new driver.ted.beans.TimeDate.dateTimeSpinnerBean();
        jLabel1 = new javax.swing.JLabel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setBackground(new java.awt.Color(0, 0, 0));
        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setIconifiable(true);
        setTitle("Lunar Rise/Set Tool");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/lunartool.gif")));
        setPreferredSize(new java.awt.Dimension(567, 517));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        getContentPane().add(julianDateInputBean1, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 84, 110, -1));

        jButton2.setText("Get Current Time");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 151, -1, -1));

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBorder(new javax.swing.border.TitledBorder("Active Parameters"));
        jLabel6.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel6.setText("Time:");
        jPanel5.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        activeTimeField.setEditable(false);
        activeTimeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        activeTimeField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel5.add(activeTimeField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 120, -1));

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel7.setText("Latitude:");
        jPanel5.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        activeLatField.setEditable(false);
        activeLatField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        activeLatField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel5.add(activeLatField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 120, -1));

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel8.setText("Longitude:");
        jPanel5.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        activeLonField.setEditable(false);
        activeLonField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        activeLonField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel5.add(activeLonField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 120, -1));

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel9.setText("Time Offset:");
        jPanel5.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        activeTOField.setEditable(false);
        activeTOField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        activeTOField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel5.add(activeTOField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 120, 120, -1));

        jLabel61.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel61.setText("Date:");
        jPanel5.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, -1, -1));

        activeDateField.setEditable(false);
        activeDateField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        activeDateField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel5.add(activeDateField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 120, -1));

        jButton3.setText("Change ...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel5.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, -1, -1));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 189, 210, 190));

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        jPanel31.setLayout(new java.awt.GridLayout(2, 3, 4, 0));

        jLabel11.setFont(new java.awt.Font("Dialog", 2, 12));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Rise Azimuth");
        jPanel31.add(jLabel11);

        jLabel31.setFont(new java.awt.Font("Dialog", 2, 12));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("Max Elevation");
        jPanel31.add(jLabel31);

        jLabel41.setFont(new java.awt.Font("Dialog", 2, 12));
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel41.setText("Set Azimuth");
        jPanel31.add(jLabel41);

        RiseAzField.setEditable(false);
        RiseAzField.setFont(new java.awt.Font("Dialog", 1, 12));
        RiseAzField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RiseAzField.setBorder(null);
        RiseAzField.setRequestFocusEnabled(false);
        RiseAzField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel31.add(RiseAzField);

        MaxElevationField.setEditable(false);
        MaxElevationField.setFont(new java.awt.Font("Dialog", 1, 12));
        MaxElevationField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        MaxElevationField.setBorder(null);
        MaxElevationField.setRequestFocusEnabled(false);
        MaxElevationField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel31.add(MaxElevationField);

        SetAzField.setEditable(false);
        SetAzField.setFont(new java.awt.Font("Dialog", 1, 12));
        SetAzField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        SetAzField.setBorder(null);
        SetAzField.setRequestFocusEnabled(false);
        SetAzField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel31.add(SetAzField);

        jPanel2.add(jPanel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 290, 40));

        jPanel3.setLayout(new java.awt.GridLayout(2, 3, 4, 0));

        jLabel12.setFont(new java.awt.Font("Dialog", 2, 12));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Rise");
        jPanel3.add(jLabel12);

        jLabel3.setFont(new java.awt.Font("Dialog", 2, 12));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Transit");
        jPanel3.add(jLabel3);

        jLabel4.setFont(new java.awt.Font("Dialog", 2, 12));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Set");
        jPanel3.add(jLabel4);

        riseField.setEditable(false);
        riseField.setFont(new java.awt.Font("Dialog", 1, 12));
        riseField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        riseField.setBorder(null);
        riseField.setRequestFocusEnabled(false);
        riseField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel3.add(riseField);

        transitField.setEditable(false);
        transitField.setFont(new java.awt.Font("Dialog", 1, 12));
        transitField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        transitField.setBorder(null);
        transitField.setRequestFocusEnabled(false);
        transitField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel3.add(transitField);

        setField.setEditable(false);
        setField.setFont(new java.awt.Font("Dialog", 1, 12));
        setField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        setField.setBorder(null);
        setField.setRequestFocusEnabled(false);
        setField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel3.add(setField);

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 290, 40));

        jPanel4.setLayout(new java.awt.GridLayout(2, 3, 4, 3));

        jLabel5.setFont(new java.awt.Font("Dialog", 2, 12));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Amount of Moonlight");
        jPanel4.add(jLabel5);

        amountOfMoonlightField.setEditable(false);
        amountOfMoonlightField.setFont(new java.awt.Font("Dialog", 1, 12));
        amountOfMoonlightField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        amountOfMoonlightField.setBorder(null);
        amountOfMoonlightField.setRequestFocusEnabled(false);
        amountOfMoonlightField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel4.add(amountOfMoonlightField);

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 140, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 310, 150));

        jButton1.setText("Calculate");
        jButton1.setFocusCycleRoot(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 170, -1, -1));

        jTabbedPane1.addTab("Rise / Set Times", jPanel1);

        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lastQuarterField.setEditable(false);
        lastQuarterField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lastQuarterField.setBorder(new javax.swing.border.TitledBorder("Last Quarter"));
        jPanel6.add(lastQuarterField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 190, -1));

        newMoonField.setEditable(false);
        newMoonField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        newMoonField.setBorder(new javax.swing.border.TitledBorder("New Moon"));
        jPanel6.add(newMoonField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 190, -1));

        firstQuarterField.setEditable(false);
        firstQuarterField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        firstQuarterField.setBorder(new javax.swing.border.TitledBorder("First Quarter"));
        jPanel6.add(firstQuarterField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 190, -1));

        fullMoonField.setEditable(false);
        fullMoonField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fullMoonField.setBorder(new javax.swing.border.TitledBorder("Full Moon"));
        jPanel6.add(fullMoonField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 190, -1));

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Full 100.00%");
        jPanel6.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 100, -1));

        moonPicture.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        moonPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/wax75.jpg")));
        moonPicture.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel6.add(moonPicture, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jTabbedPane1.addTab("Phases", jPanel6);

        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        raField.setEditable(false);
        raField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        raField.setBorder(new javax.swing.border.TitledBorder("Right Ascension (h:m:s)"));
        raField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel7.add(raField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 150, 40));

        declinationField.setEditable(false);
        declinationField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        declinationField.setBorder(new javax.swing.border.TitledBorder("Declination (d m s)"));
        declinationField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel7.add(declinationField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 150, 40));

        jToggleButton1.setText("Continuously Update");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jPanel7.add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, -1, -1));

        azField.setEditable(false);
        azField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        azField.setBorder(new javax.swing.border.TitledBorder("Azimuth (Deg from N)"));
        azField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel7.add(azField, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 40, 150, 40));

        elevationField.setEditable(false);
        elevationField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        elevationField.setBorder(new javax.swing.border.TitledBorder("Elevation (deg)"));
        elevationField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel7.add(elevationField, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 150, 40));

        jTabbedPane1.addTab("Coordinates", jPanel7);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(226, 153, 330, 230));

        dateTimeSpinnerBean1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateTimeSpinnerBean1PropertyChange(evt);
            }
        });

        getContentPane().add(dateTimeSpinnerBean1, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 23, 220, 50));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/fullmoon.jpg")));
        jLabel1.setMaximumSize(new java.awt.Dimension(567, 446));
        jLabel1.setMinimumSize(new java.awt.Dimension(567, 446));
        jLabel1.setPreferredSize(new java.awt.Dimension(567, 446));
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, -5, 570, 530));

        pack();
    }//GEN-END:initComponents

    private void dateTimeSpinnerBean1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateTimeSpinnerBean1PropertyChange
        jd = new T_JulianDate(dateTimeSpinnerBean1.getDateTime());
        updateActive();
    }//GEN-LAST:event_dateTimeSpinnerBean1PropertyChange

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        preferencesDialog pd = new preferencesDialog(null, true);
        pd.setTitle("Lunar Active Parameters");        
        pd.setVisible(true);
        if(pd.isUpdated()){
            activeLatitude = pd.getLatitude();
            activeLongitude = pd.getLongitude();
            activeTimeOffset = pd.getTimeOffset();
            updateActive();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
       if(!isApplet){
           driver.ted.toolbox.ToolBoxApp.decrementFrameCount();
       }else{
           driver.ted.toolbox.ToolBoxJPanel.decrementFrameCount();
       }
    }//GEN-LAST:event_formInternalFrameClosed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if(jToggleButton1.isSelected()){
            timer1.start();
            jToggleButton1.setText("     Stop Updating    ");
        }else{
            timer1.stop();
            jToggleButton1.setText("Continuously Update");
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jd = new T_JulianDate();
        updateActive();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.text.DecimalFormat fm = new java.text.DecimalFormat("0.000");
        RS = new T_RiseSet(jd,activeLatitude,activeLongitude,(float)activeTimeOffset,T_RiseSet.MOON);
        riseField.setText(RS.getRiseTime());
        transitField.setText(RS.getTransitTime());
        setField.setText(RS.getSetTime());
        RiseAzField.setText(fm.format(RS.getRiseAzimuth()));
        MaxElevationField.setText(fm.format(RS.getTransitElevation()));
        SetAzField.setText(fm.format(RS.getSetAzimuth()));
        amountOfMoonlightField.setText(RS.getAmountOfDaylight());
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void updateActive(){
        LC = new T_LunarCoords(jd);
        StringBuffer tempString = new StringBuffer();
        // update active fields
        activeDateField.setText(jd.getDate().toMediumString());
        activeTimeField.setText(jd.getTime().toString());
        activeLatField.setText(new java.text.DecimalFormat("00.000000").format(activeLatitude));
        activeLonField.setText(new java.text.DecimalFormat("000.000000").format(activeLongitude));
        activeTOField.setText(new java.text.DecimalFormat("0.0").format(activeTimeOffset));
        
        // update moon phase picture
        updateMoonPicture();
        double currentday = jd.getJulianDate();
        
        // update moon phase dates
        T_JulianDate temp = new T_JulianDate(LC.getPhase(jd, activeTimeOffset,LC.NEW_MOON));
        if(temp.getJulianDate() < currentday){ // Check for earlier times than current date, if so, add a month
            temp = new T_JulianDate(LC.getPhase(new T_JulianDate(jd.getJulianDate()+30.0), activeTimeOffset, LC.NEW_MOON));
        }
        tempString.append(temp.getDate().toMediumString() + ", " + temp.getTime().toString());
        newMoonField.setText(tempString.toString());
        tempString.delete(0, tempString.length());
        
        
        temp = new T_JulianDate(LC.getPhase(jd, activeTimeOffset,LC.FIRST_QUARTER));
        if(temp.getJulianDate() < currentday){ // Check for earlier times than current date, if so, add a month
            temp = new T_JulianDate(LC.getPhase(new T_JulianDate(jd.getJulianDate()+30.0), activeTimeOffset,LC.FIRST_QUARTER));
        }
        tempString.append(temp.getDate().toMediumString() + ", " + temp.getTime().toString());
        firstQuarterField.setText(tempString.toString());
        tempString.delete(0, tempString.length());
        
        temp = new T_JulianDate(LC.getPhase(jd, activeTimeOffset,LC.FULL_MOON));
        if(temp.getJulianDate() < currentday){ // Check for earlier times than current date, if so, add a month
            temp = new T_JulianDate(LC.getPhase(new T_JulianDate(jd.getJulianDate()+30.0), activeTimeOffset,LC.FULL_MOON));
        }
        tempString.append(temp.getDate().toMediumString() + ", " + temp.getTime().toString());
        fullMoonField.setText(tempString.toString());
        tempString.delete(0, tempString.length());
        
        temp = new T_JulianDate(LC.getPhase(jd, activeTimeOffset,LC.LAST_QUARTER));
        if(temp.getJulianDate() < currentday){ // Check for earlier times than current date, if so, add a month
            temp = new T_JulianDate(LC.getPhase(new T_JulianDate(jd.getJulianDate()+30.0), activeTimeOffset,LC.LAST_QUARTER));
        }
        tempString.append(temp.getDate().toMediumString() + ", " + temp.getTime().toString());
        lastQuarterField.setText(tempString.toString());
        
        // update moon coordinates
        raField.setText(T_Utilities.decimalToRAHMS(LC.getAlpha(),3)); // new java.text.DecimalFormat("0.000000").format(SC.getAlpha_low()));
        declinationField.setText(T_Utilities.decimalToDMSDIRV(LC.getDelta(),3)); //new java.text.DecimalFormat("0.000000").format(SC.getDelta_low())); //
        
        // Set the azimuth and elevation fields
        T_JulianDate gmtjd = new T_JulianDate(jd.getJulianDate() - (activeTimeOffset/24.0));
        LC.setDateTime(gmtjd);
        double ra = LC.getAlpha();
        double dec = LC.getDelta();
        raField.setText(T_Utilities.decimalToRAHMS(ra,3)); // new java.text.DecimalFormat("0.000000").format(SC.getAlpha_low()));
        declinationField.setText(T_Utilities.decimalToDMSDIRV(dec,3)); //new java.text.DecimalFormat("0.000000").format(SC.getDelta_low())); //
        double[] azEl = new T_Coordinates().EquatorialToLocalHorizontal(ra,dec, activeLatitude,activeLongitude, gmtjd);
        
        azField.setText(new java.text.DecimalFormat("00.00").format(azEl[0]));
        elevationField.setText(new java.text.DecimalFormat("00.00").format(azEl[1]));
    }
    
    private void checkForStoredPreferences(){
       if(contains(prefs,latitudePref)){
           activeLatitude = prefs.getDouble(latitudePref,0.0);
       }else{
           activeLatitude = 0.0;
       }

       if(contains(prefs,longitudePref)){
           activeLongitude = prefs.getDouble(longitudePref,0.0);
       }else{
           activeLongitude = 0.0;
       }

       if(contains(prefs,timeOffsetPref)){
           activeTimeOffset = prefs.getDouble(timeOffsetPref,0);    
       }else{
           activeTimeOffset = 0.0;
       }
    }
    
    private static boolean contains(Preferences node, String key){
        return node.get(key,null) != null;
    }
    
    private void updateMoonPicture(){
        double ill = LC.getIllumination(jd);
        java.text.DecimalFormat illF = new java.text.DecimalFormat("0.00");
        if( ill < 0.05){ // new moon 
            moonPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/new.jpg")));
            jLabel10.setText("New " + illF.format(ill*100.0) + "%");
        }
        else if ( (ill >= 0.05) && ( ill < 0.32) ){
            // check if waxing or waning by checking past point about 2 hours ago
            T_JulianDate temp = new T_JulianDate(jd.getJulianDate() - 0.08);
            double previousIll  = LC.getIllumination(temp);
            if (previousIll < ill){ // waxing
                moonPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/wax25.jpg")));
                jLabel10.setText("Waxing " + illF.format(ill*100.0) + "%");
            }else{ // waning
                moonPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/wane25.jpg")));
                jLabel10.setText("Waning " + illF.format(ill*100.0) + "%");
            }
        }else if((ill >= 0.32) && ( ill < 0.62)){
            // check if waxing or waning by checking past point about 2 hours ago
            T_JulianDate temp = new T_JulianDate(jd.getJulianDate() - 0.08);
            double previousIll  = LC.getIllumination(temp);
            if (previousIll < ill){ // waxing
                moonPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/wax50.jpg")));
                jLabel10.setText("Waxing " + illF.format(ill*100.0) + "%");
            }else{ // waning
                moonPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/wane50.jpg")));
                jLabel10.setText("Waning " + illF.format(ill*100.0) + "%");
            }
        }else if ((ill >= 0.62) && ( ill < 0.95)){
            // check if waxing or waning by checking past point about 2 hours ago
            T_JulianDate temp = new T_JulianDate(jd.getJulianDate() - 0.08);
            double previousIll  = LC.getIllumination(temp);
            if (previousIll < ill){ // waxing
                moonPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/wax75.jpg")));
                jLabel10.setText("Waxing " + illF.format(ill*100.0) + "%");
            }else{ // waning
                moonPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/wane75.jpg")));
                jLabel10.setText("Waning " + illF.format(ill*100.0) + "%");
            }
        }else if(ill >= 0.95){
            moonPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/full.jpg")));
            jLabel10.setText("Full " + illF.format(ill*100.0) + "%");
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField MaxElevationField;
    private javax.swing.JTextField RiseAzField;
    private javax.swing.JTextField SetAzField;
    private javax.swing.JTextField activeDateField;
    private javax.swing.JTextField activeLatField;
    private javax.swing.JTextField activeLonField;
    private javax.swing.JTextField activeTOField;
    private javax.swing.JTextField activeTimeField;
    private javax.swing.JTextField amountOfMoonlightField;
    private javax.swing.JTextField azField;
    private driver.ted.beans.TimeDate.dateTimeSpinnerBean dateTimeSpinnerBean1;
    private javax.swing.JTextField declinationField;
    private javax.swing.JTextField elevationField;
    private javax.swing.JTextField firstQuarterField;
    private javax.swing.JTextField fullMoonField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private driver.ted.beans.TimeDate.JulianDateInputBean julianDateInputBean1;
    private javax.swing.JTextField lastQuarterField;
    private javax.swing.JLabel moonPicture;
    private javax.swing.JTextField newMoonField;
    private javax.swing.JTextField raField;
    private javax.swing.JTextField riseField;
    private javax.swing.JTextField setField;
    private javax.swing.JTextField transitField;
    // End of variables declaration//GEN-END:variables
    
}
