/*
 * LunarToolFrame.java
 *
 * Created on September 10, 2002, 2:18 PM
 */

package driver.ted.toolbox;
import driver.ted.utilities.T_GPSTime;
import driver.ted.astro.T_LunarCoords;
import driver.ted.utilities.T_Utilities;
import driver.ted.utilities.T_JulianDate;
import driver.ted.utilities.T_Converter;
import driver.ted.utilities.T_Time;
import java.util.prefs.Preferences;
import java.awt.event.*;
import java.text.DecimalFormat;

/**
 *
 * @author  tdriver
 */
public class GPSToolFrame extends javax.swing.JInternalFrame {
    
    T_GPSTime gpsTime = new T_GPSTime(); // initializes GPS Time to computer time
    double newTimeOffset = 0.0;
    double oldTimeOffset = 0.0;
    Preferences prefs;
        
    javax.swing.SpinnerNumberModel epochModel = new javax.swing.SpinnerNumberModel(1,1,5,1);
    
    static final int INTEGER = 1;
    static final int HEX = 2;
    static final int BINARY = 4;

    int Z_CountType = INTEGER;
    
    boolean isApplet;
    
    
    // update every Z-Count
    javax.swing.Timer timer1 = new javax.swing.Timer(1000,new ActionListener(){
      public void actionPerformed(ActionEvent evt) {
         
         gpsTime.advance(0,0,0,0,0,1);
         updateActive();
        }
      }); 
      
    
    final String timeOffsetPref = "TimeOffset";
    
    /** Creates new form LunarRiseSetFrame */
    public GPSToolFrame(boolean applet) {
        isApplet = applet;
        initComponents();
        if(!isApplet){
            prefs = Preferences.userNodeForPackage(this.getClass());
            checkForStoredPreferences();
        }
        updateActive();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel11 = new javax.swing.JPanel();
        timeOffsetInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        julianDateInputBean1 = new driver.ted.beans.TimeDate.JulianDateInputBean();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        activeTimeField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        activeTOField = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        activeDateField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        activeJDField = new javax.swing.JTextField();
        gpsWeekField = new javax.swing.JTextField();
        towField = new javax.swing.JTextField();
        zcountField = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        kpointField = new javax.swing.JTextField();
        gpsEpochChooser2 = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        dateTimeSpinnerBean1 = new driver.ted.beans.TimeDate.dateTimeSpinnerBean();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 153, 51)));
        setClosable(true);
        setIconifiable(true);
        setTitle("GPS Time");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/driver/ted/toolbox/images/GPStool.gif")));
        setMaximumSize(getPreferredSize());
        setMinimumSize(getPreferredSize());
        setPreferredSize(new java.awt.Dimension(562, 414));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel11.setBorder(new javax.swing.border.TitledBorder("Time Offset"));
        jPanel11.setToolTipText("Select the time offset to use");
        timeOffsetInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timeOffsetInput.setText("0");
        timeOffsetInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeOffsetInputActionPerformed(evt);
            }
        });

        jPanel11.add(timeOffsetInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 50, -1));

        jLabel2.setText("hours from UTC");
        jPanel11.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        getContentPane().add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 124, 110, 60));

        julianDateInputBean1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                julianDateInputBean1PropertyChange(evt);
            }
        });

        getContentPane().add(julianDateInputBean1, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 64, 110, 50));

        jButton2.setText("Get Current Time");
        jButton2.setToolTipText("Sets the Active Date and time to the current computer time");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 206, -1, -1));

        jLabel1.setForeground(new java.awt.Color(51, 102, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("GPS Epoch Date");
        jLabel1.setToolTipText("Epochs are 1024 week intervals starting Jan 6, 1980");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, 300, 20));

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBorder(new javax.swing.border.TitledBorder("Active Parameters"));
        jPanel5.setToolTipText("Displays the parameters used to calculate the GPS data");
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("GPS Time:");
        jPanel5.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 40, 70, -1));

        activeTimeField.setEditable(false);
        activeTimeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        activeTimeField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel5.add(activeTimeField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 120, -1));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Time Offset:");
        jPanel5.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 70, -1));

        activeTOField.setEditable(false);
        activeTOField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        activeTOField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel5.add(activeTOField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, 120, -1));

        jLabel61.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel61.setText("Date:");
        jPanel5.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 20, 70, -1));

        activeDateField.setEditable(false);
        activeDateField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        activeDateField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel5.add(activeDateField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 120, -1));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Julian Date:");
        jPanel5.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 70, -1));

        activeJDField.setEditable(false);
        activeJDField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        activeJDField.setSelectionColor(new java.awt.Color(255, 255, 51));
        jPanel5.add(activeJDField, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 120, -1));

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 210, 120));

        gpsWeekField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gpsWeekField.setText("jTextField1");
        gpsWeekField.setToolTipText("The number of weeks since the selected GPS epoch");
        gpsWeekField.setBorder(new javax.swing.border.TitledBorder("GPS Week"));
        gpsWeekField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpsWeekFieldActionPerformed(evt);
            }
        });

        getContentPane().add(gpsWeekField, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 150, 120, -1));

        towField.setEditable(false);
        towField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        towField.setText("jTextField1");
        towField.setToolTipText("The number of seconds since Sunday midnight");
        towField.setBorder(new javax.swing.border.TitledBorder("Time Of Week (Secs)"));
        getContentPane().add(towField, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 150, 140, -1));

        zcountField.setEditable(false);
        zcountField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        zcountField.setText("jTextField1");
        zcountField.setToolTipText("The number of 1.5 second intervals since selected GPS Epoch");
        zcountField.setBorder(new javax.swing.border.TitledBorder("Z-Counts"));
        getContentPane().add(zcountField, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 210, 320, -1));

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Integer");
        jRadioButton1.setToolTipText("Z-Count display is in integer (base 10) format");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        getContentPane().add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 259, 70, -1));

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Hex");
        jRadioButton2.setToolTipText("Z-Count display is in hex (base 16) format");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        getContentPane().add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(361, 259, -1, -1));

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Binary");
        jRadioButton3.setToolTipText("Z-Count display is in binary (base 2) format.  Separated into 10 bit week and 19 bit TOW");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        getContentPane().add(jRadioButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 259, 70, -1));

        jToggleButton1.setText("Continuously Update");
        jToggleButton1.setToolTipText("Updates the GPS information at 1 sec intervals");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        getContentPane().add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 300, -1, -1));

        kpointField.setEditable(false);
        kpointField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        kpointField.setText("jTextField1");
        kpointField.setToolTipText("The number of 15 minute intervals since the selected GPS Epoch ");
        kpointField.setBorder(new javax.swing.border.TitledBorder("K-Points Since GPS Epoch"));
        getContentPane().add(kpointField, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 100, 170, -1));

        gpsEpochChooser2.setModel(epochModel);
        gpsEpochChooser2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gpsEpochChooser2StateChanged(evt);
            }
        });

        getContentPane().add(gpsEpochChooser2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 80, -1));

        jLabel3.setText("GPS Epoch");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, -1, -1));

        dateTimeSpinnerBean1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateTimeSpinnerBean1PropertyChange(evt);
            }
        });

        getContentPane().add(dateTimeSpinnerBean1, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 12, 230, 50));

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void dateTimeSpinnerBean1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateTimeSpinnerBean1PropertyChange
        gpsTime = new T_GPSTime(new T_JulianDate(dateTimeSpinnerBean1.getDateTime()));
        updateActive();
    }//GEN-LAST:event_dateTimeSpinnerBean1PropertyChange

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        if(!isApplet){
            driver.ted.toolbox.ToolBoxApp.decrementFrameCount();
        }else{
            driver.ted.toolbox.ToolBoxJPanel.decrementFrameCount();
        }
    }//GEN-LAST:event_formInternalFrameClosed

    private void gpsEpochChooser2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gpsEpochChooser2StateChanged
        int newepoch =  ((Integer)epochModel.getValue()).intValue();
        gpsTime.setGPSEpoch(newepoch);
        updateActive();
    }//GEN-LAST:event_gpsEpochChooser2StateChanged

    private void julianDateInputBean1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_julianDateInputBean1PropertyChange
        // create new GPS Time
        gpsTime = new T_GPSTime(new T_JulianDate(julianDateInputBean1.getJD()));
        updateActive();
    }//GEN-LAST:event_julianDateInputBean1PropertyChange

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // Integer Radio Button pressed
        Z_CountType = BINARY;
        updateActive();
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // Integer Radio Button pressed
        Z_CountType = HEX;
        updateActive();
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // Integer Radio Button pressed
        Z_CountType = INTEGER;
        updateActive();
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if(jToggleButton1.isSelected()){
            dateTimeSpinnerBean1.setEnabled(false);
           // dateInputBean1.setEnabled(false);
            timer1.start();
            jToggleButton1.setText("     Stop Updating    ");
        }else{
            timer1.stop();
            dateTimeSpinnerBean1.setEnabled(true);
            //dateInputBean1.setEnabled(true);
            jToggleButton1.setText("Continuously Update");
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void gpsWeekFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpsWeekFieldActionPerformed
     // Week entered and enter pressed
        // Change 7/26/04; allow the user to set the epoch as well, so a week of 243 entered
        // will also be accompanied by the epoch entered and the GPS Time calculated based on that.
        // previously assumed that GPS epoch was 1
    try{
      int gpsWeek = Integer.parseInt(gpsWeekField.getText());
      int referenceEpoch =  ((Integer)epochModel.getValue()).intValue();
      if (gpsWeek < 0 || gpsWeek > 4095) throw new NumberFormatException();
      int current_tow = gpsTime.getTimeOfWeek();
      int gpsWeekFromInitialEpoch = gpsWeek+1024*(referenceEpoch - 1);
      gpsTime = new T_GPSTime(gpsWeekFromInitialEpoch,current_tow);
      updateActive();
    }catch(NumberFormatException nfe){
      javax.swing.JOptionPane.showMessageDialog(this,
        "GPS Week Number must be an integer greater than 0 and less than 4095.",
        "Error Setting GPS Week",
        javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_gpsWeekFieldActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // set to current time
        gpsTime = new T_GPSTime();
        // apply time offset if necessary
        T_JulianDate temp = new T_JulianDate(gpsTime.getGPSTime() - (newTimeOffset - oldTimeOffset)/24.0);
        gpsTime = new T_GPSTime(temp);
        dateTimeSpinnerBean1.setDateTime(temp.getJulianDate());
        updateActive();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void timeOffsetInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeOffsetInputActionPerformed
        try{
            Float.parseFloat(timeOffsetInput.getText());           
            prefs.putFloat(timeOffsetPref,Float.parseFloat(timeOffsetInput.getText()));
        }catch(NumberFormatException nfe){
            javax.swing.JOptionPane.showMessageDialog(this,
            "The Time Offset must be a decimal number",
            "Error Setting Time Offset",
            javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }      
        // correct for Time Offset in hours
        //need to subtract the current time offset from the new offset to get the correct time
        oldTimeOffset = Double.parseDouble(activeTOField.getText());
        newTimeOffset = Double.parseDouble(timeOffsetInput.getText());
        T_JulianDate temp = new T_JulianDate(gpsTime.getGPSTime() - (newTimeOffset - oldTimeOffset)/24.0);
        gpsTime = new T_GPSTime(temp);
        updateActive();
    }//GEN-LAST:event_timeOffsetInputActionPerformed
    /** this function updates the data in the active parameter fields and then re-calculates all the 
     * related quantities
     */
    private void updateActive(){
               
        DecimalFormat df = new DecimalFormat("0.000");
        // update the active parameters
        // do not update time here...just update the active parameters based on current time
        T_JulianDate temp = new T_JulianDate(gpsTime.getGPSTime());
        
        // update the Time/Date Fields
        activeDateField.setText(temp.getDate().toMediumString());
        activeTimeField.setText(temp.getTime().toString());
        activeTOField.setText(timeOffsetInput.getText());
        activeJDField.setText(new java.text.DecimalFormat("0.000000").format(temp.getJulianDate()));
        
        // update the GPS Epoch Chooser and label
        int gpsEpoch = gpsTime.getGPSEpochIndex();
        epochModel.setValue(new Integer(gpsEpoch));
        jLabel1.setText(gpsTime.getGPSEpoch());

        // update the GPS Week Field
        // Chnage 7/26/04  Now reference the gpsWeek to that of the displayed epoch
        int currentWeek = gpsTime.getGPSWeek() - 1024*(gpsEpoch - 1);
        gpsWeekField.setText(Integer.toString(gpsTime.getGPSWeek()));

        // update the Time of Week Field
        towField.setText(Integer.toString(gpsTime.getTimeOfWeek()));

        // update the KPoint Field
        kpointField.setText(df.format(gpsTime.getKpoints()));

        // update the Z-Count Field
        if (Z_CountType == INTEGER){
          zcountField.setText(T_Converter.getInt(Long.toString(gpsTime.getZCounts()),T_Converter.INTEGER));
        }else if (Z_CountType == HEX){
          zcountField.setText(T_Converter.getHex(Long.toString(gpsTime.getZCounts()),T_Converter.INTEGER).toUpperCase());
        }else if (Z_CountType == BINARY){
          int week = Integer.parseInt(gpsWeekField.getText());
          if(week > 1023 || week < 0){
            // display message to set to current week
            javax.swing.JOptionPane.showMessageDialog(this,
              "The Z-Count will not fit in the display (> 29 bits)!",
              "Z-Count Out Of Range",
              javax.swing.JOptionPane.WARNING_MESSAGE);

              // arbitrarily select the HEX format to return to
              Z_CountType = HEX;
              jRadioButton2.setSelected(true);
              jRadioButton2.grabFocus();
              //redo this function
              updateActive();
          }else{
            // update the Z-Count Field
             zcountField.setText(T_Converter.getBinary(Long.toString(gpsTime.getZCounts()),T_Converter.INTEGER,29));
          }
        }
    }

    
    private void checkForStoredPreferences(){
        if(contains(prefs,timeOffsetPref))
               timeOffsetInput.setText(new java.text.DecimalFormat("0.0").format(prefs.getFloat(timeOffsetPref,0)));    
               oldTimeOffset = 0.0;
               newTimeOffset = (double)Float.parseFloat(timeOffsetInput.getText());
               //changes GPS time to reflect time offset if necessary
               T_JulianDate temp = new T_JulianDate(gpsTime.getGPSTime() - (newTimeOffset - oldTimeOffset)/24.0);
               gpsTime = new T_GPSTime(temp);
    }
    
    private static boolean contains(Preferences node, String key){
        return node.get(key,null) != null;
    }
       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField activeDateField;
    private javax.swing.JTextField activeJDField;
    private javax.swing.JTextField activeTOField;
    private javax.swing.JTextField activeTimeField;
    private javax.swing.ButtonGroup buttonGroup1;
    private driver.ted.beans.TimeDate.dateTimeSpinnerBean dateTimeSpinnerBean1;
    private javax.swing.JSpinner gpsEpochChooser2;
    private javax.swing.JTextField gpsWeekField;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JToggleButton jToggleButton1;
    private driver.ted.beans.TimeDate.JulianDateInputBean julianDateInputBean1;
    private javax.swing.JTextField kpointField;
    private javax.swing.JTextField timeOffsetInput;
    private javax.swing.JTextField towField;
    private javax.swing.JTextField zcountField;
    // End of variables declaration//GEN-END:variables
    
}
