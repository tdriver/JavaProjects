/*
 * DateInputBean.java
 *
 * Created on July 29, 2002, 11:42 AM
 */

package driver.ted.beans.TimeDate;
import java.text.DecimalFormat;

/**
 *
 * @author  tdriver
 */
public class DateInputBean extends javax.swing.JPanel {
    
    /** Creates new form DateInputBean */
    public DateInputBean() {
        initComponents();
        day = 1;
        month = 1;
        year = 2000;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();
        monthField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dayField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        yearField = new javax.swing.JTextField();

        setLayout(new java.awt.GridLayout(3, 2, 2, 1));

        setBorder(new javax.swing.border.TitledBorder("Date"));
        setMaximumSize(getPreferredSize());
        setMinimumSize(getPreferredSize());
        setPreferredSize(new java.awt.Dimension(100, 80));
        addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)
            throws java.beans.PropertyVetoException {
                formVetoableChange(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Month:");
        add(jLabel1);

        monthField.setText("01");
        monthField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthFieldActionPerformed(evt);
            }
        });

        monthField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                monthFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                monthFieldFocusLost(evt);
            }
        });

        monthField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthFieldMouseClicked(evt);
            }
        });

        add(monthField);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Day:");
        add(jLabel3);

        dayField.setText("01");
        dayField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayFieldActionPerformed(evt);
            }
        });

        dayField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dayFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dayFieldFocusLost(evt);
            }
        });

        dayField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dayFieldMouseClicked(evt);
            }
        });

        add(dayField);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Year:");
        add(jLabel2);

        yearField.setText("2000");
        yearField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearFieldActionPerformed(evt);
            }
        });

        yearField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                yearFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                yearFieldFocusLost(evt);
            }
        });

        yearField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                yearFieldMouseClicked(evt);
            }
        });

        add(yearField);

    }//GEN-END:initComponents

    private void yearFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearFieldFocusLost
        yearFieldActionPerformed(null);
    }//GEN-LAST:event_yearFieldFocusLost

    private void dayFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dayFieldFocusLost
        dayFieldActionPerformed(null);
    }//GEN-LAST:event_dayFieldFocusLost

    private void monthFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_monthFieldFocusLost
        monthFieldActionPerformed(null);
    }//GEN-LAST:event_monthFieldFocusLost

    private void formVetoableChange(java.beans.PropertyChangeEvent evt) throws java.beans.PropertyVetoException {//GEN-FIRST:event_formVetoableChange
        String prop = evt.getPropertyName();
        DecimalFormat df = new DecimalFormat("00");
        if(prop == "month"){
            int i = ((Integer)evt.getNewValue()).intValue();
            if((i < 1) || (i > 12)){
                monthField.setText(df.format((Integer)evt.getOldValue()));
                throw new java.beans.PropertyVetoException("Months must be between 1 and 12.",evt);
            }
        }else if(prop == "day"){
            int i = ((Integer)evt.getNewValue()).intValue();
            if((i < 1) || (i > 31)){
                dayField.setText(df.format((Integer)evt.getOldValue()));
                throw new java.beans.PropertyVetoException("Days must be between 1 and 31.",evt);
            }
        }
    }//GEN-LAST:event_formVetoableChange

    private void yearFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearFieldActionPerformed
        try{
                this.setYear(Integer.parseInt(yearField.getText()));
            }catch(NumberFormatException nfe){
                yearField.setText("2000");
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "You must use an int value to specify the year.",
                    "Error in Number Format",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }catch(java.beans.PropertyVetoException pve){
            javax.swing.JOptionPane.showMessageDialog(this, 
                pve.getMessage(),
                "Error Setting Year",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_yearFieldActionPerformed

    private void dayFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayFieldActionPerformed
        try{
                this.setDay(Integer.parseInt(dayField.getText()));
            }catch(NumberFormatException nfe){
                dayField.setText("01");
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "You must use an integer to specify the day",
                    "Error in Number Format",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }catch(java.beans.PropertyVetoException pve){
                javax.swing.JOptionPane.showMessageDialog(this, 
                    pve.getMessage(),
                    "Error Setting Day",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_dayFieldActionPerformed

    private void monthFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthFieldActionPerformed
        try{
                this.setMonth(Integer.parseInt(monthField.getText()));
            }catch(NumberFormatException nfe){
                monthField.setText("01");
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "You must use an integer to specify the month",
                    "Error in Number Format",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }catch(java.beans.PropertyVetoException pve){
            javax.swing.JOptionPane.showMessageDialog(this, 
                pve.getMessage(),
                "Error Setting Month",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_monthFieldActionPerformed

    private void yearFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yearFieldMouseClicked
        yearField.selectAll();
    }//GEN-LAST:event_yearFieldMouseClicked

    private void yearFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yearFieldFocusGained
        yearField.selectAll();
    }//GEN-LAST:event_yearFieldFocusGained

    private void dayFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dayFieldMouseClicked
        dayField.selectAll();
    }//GEN-LAST:event_dayFieldMouseClicked

    private void dayFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dayFieldFocusGained
        dayField.selectAll();
    }//GEN-LAST:event_dayFieldFocusGained

    private void monthFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthFieldMouseClicked
        monthField.selectAll();
    }//GEN-LAST:event_monthFieldMouseClicked

    private void monthFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_monthFieldFocusGained
        monthField.selectAll();
    }//GEN-LAST:event_monthFieldFocusGained

    /** Adds a PropertyChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addPropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.addPropertyChangeListener(l);
    }    

    /** Removes a PropertyChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removePropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.removePropertyChangeListener(l);
    }
    
    /** Adds a VetoableChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addVetoableChangeListener(java.beans.VetoableChangeListener l) {
        vetoableChangeSupport.addVetoableChangeListener(l);
    }
    
    /** Removes a VetoableChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removeVetoableChangeListener(java.beans.VetoableChangeListener l) {
        vetoableChangeSupport.removeVetoableChangeListener(l);
    }
    
    /** Getter for property day.
     * @return Value of property day.
     */
    public int getDay() {
        return this.day;
    }
    
    /** Setter for property day.
     * @param day New value of property day.
     *
     * @throws PropertyVetoException
     */
    public void setDay(int day) throws java.beans.PropertyVetoException {
        DecimalFormat df = new DecimalFormat("00");
        int oldDay = this.day;
        vetoableChangeSupport.fireVetoableChange("day", new Integer(Integer.MIN_VALUE), new Integer(day));
        this.day = day;
        dayField.setText(df.format(day));
      //  System.out.println("Firing property change for Set Day");
        propertyChangeSupport.firePropertyChange("day", new Integer(Integer.MIN_VALUE), new Integer(day));
      //  System.out.println("\tFired property change for Set Day");
    }
    
    /** Getter for property month.
     * @return Value of property month.
     */
    public int getMonth() {
        return this.month;
    }
    
    /** Setter for property month.
     * @param month New value of property month.
     *
     * @throws PropertyVetoException
     */
    public void setMonth(int month) throws java.beans.PropertyVetoException {
        DecimalFormat df = new DecimalFormat("00");
        int oldMonth = this.month;
        vetoableChangeSupport.fireVetoableChange("month", new Integer(Integer.MIN_VALUE), new Integer(month));
        this.month = month;
        monthField.setText(df.format(month));
       // System.out.println("Firing property change for Set Month");
        propertyChangeSupport.firePropertyChange("month", new Integer(Integer.MIN_VALUE), new Integer(month));
       // System.out.println("\tFired property change for Set Month");
    }
    
    /** Getter for property year.
     * @return Value of property year.
     */
    public int getYear() {
        return this.year;
    }
    
    /** Setter for property year.
     * @param year New value of property year.
     *
     * @throws PropertyVetoException
     */
    public void setYear(int year) throws java.beans.PropertyVetoException {
        DecimalFormat df = new DecimalFormat("00");
        int oldYear = this.year;
        vetoableChangeSupport.fireVetoableChange("year", new Integer(Integer.MIN_VALUE), new Integer(year));
        this.year = year;
        yearField.setText(df.format(year));
      //  System.out.println("Firing property change for Set Year");
        propertyChangeSupport.firePropertyChange("year", new Integer(Integer.MIN_VALUE), new Integer(year));
       // System.out.println("\tFired property change for Set Year");
    }
    
//    private void doSet() {
//        try{
//            try{
//                this.setMonth(Integer.parseInt(monthField.getText()));
//            }catch(NumberFormatException nfe){
//                monthField.setText("01");
//                javax.swing.JOptionPane.showMessageDialog(this, 
//                    "You must use an integer to specify the month",
//                    "Error in Number Format",
//                    javax.swing.JOptionPane.ERROR_MESSAGE);
//            }
//            try{
//                this.setDay(Integer.parseInt(dayField.getText()));
//            }catch(NumberFormatException nfe){
//                dayField.setText("01");
//                javax.swing.JOptionPane.showMessageDialog(this, 
//                    "You must use an integer to specify the day",
//                    "Error in Number Format",
//                    javax.swing.JOptionPane.ERROR_MESSAGE);
//            }
//            try{
//                this.setYear(Integer.parseInt(yearField.getText()));
//            }catch(NumberFormatException nfe){
//                yearField.setText("2000");
//                javax.swing.JOptionPane.showMessageDialog(this, 
//                    "You must use an int value to specify the year.",
//                    "Error in Number Format",
//                    javax.swing.JOptionPane.ERROR_MESSAGE);
//            }            
//        }catch(java.beans.PropertyVetoException pve){
//            javax.swing.JOptionPane.showMessageDialog(this, 
//                pve.getMessage(),
//                "Error",
//                javax.swing.JOptionPane.ERROR_MESSAGE);
//        }
//    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dayField;
    private javax.swing.JTextField yearField;
    private javax.swing.JTextField monthField;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    /** Utility field used by bound properties. */
    private java.beans.PropertyChangeSupport propertyChangeSupport =  new java.beans.PropertyChangeSupport(this);
    
    /** Utility field used by constrained properties. */
    private java.beans.VetoableChangeSupport vetoableChangeSupport =  new java.beans.VetoableChangeSupport(this);
    
    /** Holds value of property day. */
    private int day;
    
    /** Holds value of property month. */
    private int month;
    
    /** Holds value of property year. */
    private int year;
    
}
