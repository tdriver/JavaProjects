/*
 * TimeInputBean.java
 *
 * Created on July 30, 2002, 1:13 PM
 */

package driver.ted.beans.TimeDate;
import java.text.DecimalFormat;

/**
 *
 * @author  tdriver
 */
public class TimeInputBean extends javax.swing.JPanel {
    
    /** Creates new form BeanForm */
    public TimeInputBean() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel2 = new javax.swing.JLabel();
        hourField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        minuteField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        secondField = new javax.swing.JTextField();

        setLayout(new java.awt.GridLayout(3, 2, 2, 1));

        setBorder(new javax.swing.border.TitledBorder("Time"));
        setMaximumSize(getPreferredSize());
        setMinimumSize(getPreferredSize());
        setPreferredSize(new java.awt.Dimension(110, 80));
        addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)
            throws java.beans.PropertyVetoException {
                formVetoableChange(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Hour:");
        jLabel2.setPreferredSize(null);
        add(jLabel2);

        hourField.setText("00");
        hourField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourFieldActionPerformed(evt);
            }
        });

        hourField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                hourFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                hourFieldFocusLost(evt);
            }
        });

        hourField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hourFieldMouseClicked(evt);
            }
        });

        add(hourField);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Minute:");
        add(jLabel3);

        minuteField.setText("00");
        minuteField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minuteFieldActionPerformed(evt);
            }
        });

        minuteField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                minuteFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                minuteFieldFocusLost(evt);
            }
        });

        minuteField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minuteFieldMouseClicked(evt);
            }
        });

        add(minuteField);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Second:");
        add(jLabel1);

        secondField.setText("00");
        secondField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondFieldActionPerformed(evt);
            }
        });

        secondField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                secondFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                secondFieldFocusLost(evt);
            }
        });

        secondField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                secondFieldMouseClicked(evt);
            }
        });

        add(secondField);

    }//GEN-END:initComponents

    private void secondFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_secondFieldFocusLost
        secondFieldActionPerformed(null);
    }//GEN-LAST:event_secondFieldFocusLost

    private void minuteFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minuteFieldFocusLost
        minuteFieldActionPerformed(null);
    }//GEN-LAST:event_minuteFieldFocusLost

    private void hourFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hourFieldFocusLost
        hourFieldActionPerformed(null);
    }//GEN-LAST:event_hourFieldFocusLost

    private void formVetoableChange(java.beans.PropertyChangeEvent evt) throws java.beans.PropertyVetoException {//GEN-FIRST:event_formVetoableChange
        DecimalFormat df = new DecimalFormat("00");
        String prop = evt.getPropertyName();
        if(prop == "hour"){
            int i = ((Integer)evt.getNewValue()).intValue();
            if((i < 0) || (i > 23)){
                hourField.setText(df.format((Integer)evt.getOldValue()));
                throw new java.beans.PropertyVetoException("Hour must be between 0 and 23.",evt);
            }
        }else if(prop == "minute"){
            int i = ((Integer)evt.getNewValue()).intValue();
            if((i < 0) || (i > 59)){
                minuteField.setText(df.format((Integer)evt.getOldValue()));
                throw new java.beans.PropertyVetoException("Minutes must be between 0 and 59.",evt);
            }
        }else if(prop == "second"){
            int i = ((Integer)evt.getNewValue()).intValue();
            if((i < 0) || (i > 59)){
                secondField.setText(df.format((Integer)evt.getOldValue()));
                throw new java.beans.PropertyVetoException("Seconds must be between 0 and 59.",evt);
            }
        }
    }//GEN-LAST:event_formVetoableChange

    private void secondFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_secondFieldMouseClicked
        secondField.selectAll();
    }//GEN-LAST:event_secondFieldMouseClicked

    private void minuteFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minuteFieldMouseClicked
        minuteField.selectAll();
    }//GEN-LAST:event_minuteFieldMouseClicked

    private void hourFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hourFieldMouseClicked
        hourField.selectAll();
    }//GEN-LAST:event_hourFieldMouseClicked

    private void secondFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_secondFieldFocusGained
        secondField.selectAll();
    }//GEN-LAST:event_secondFieldFocusGained

    private void minuteFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minuteFieldFocusGained
        minuteField.selectAll();
    }//GEN-LAST:event_minuteFieldFocusGained

    private void hourFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_hourFieldFocusGained
        hourField.selectAll();
    }//GEN-LAST:event_hourFieldFocusGained

    private void secondFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondFieldActionPerformed
        try{
                this.setSecond(Integer.parseInt(secondField.getText()));
            }catch(NumberFormatException nfe){
                secondField.setText("00");
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "You must use an integer value to specify the seconds.",
                    "Error in Number Format",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }catch(java.beans.PropertyVetoException pve){
                javax.swing.JOptionPane.showMessageDialog(this, 
                    pve.getMessage(),
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_secondFieldActionPerformed

    private void minuteFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minuteFieldActionPerformed
        try{
                this.setMinute(Integer.parseInt(minuteField.getText()));
            }catch(NumberFormatException nfe){
                minuteField.setText("00");
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "You must use an integer value to specify the minute.",
                    "Error in Number Format",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }catch(java.beans.PropertyVetoException pve){
                javax.swing.JOptionPane.showMessageDialog(this, 
                    pve.getMessage(),
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_minuteFieldActionPerformed

    private void hourFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourFieldActionPerformed
        try{
                this.setHour(Integer.parseInt(hourField.getText()));
            }catch(NumberFormatException nfe){
                hourField.setText("00");
                javax.swing.JOptionPane.showMessageDialog(this, 
                    "You must use an integer value to specify the hour.",
                    "Error in Number Format",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }catch(java.beans.PropertyVetoException pve){
                javax.swing.JOptionPane.showMessageDialog(this, 
                    pve.getMessage(),
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_hourFieldActionPerformed

    /** Adds a PropertyChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addPropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.addPropertyChangeListener(l);
    }    
    
    /** Removes a PropertyChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removePropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.removePropertyChangeListener(l);
    }    
    
    /** Adds a VetoableChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addVetoableChangeListener(java.beans.VetoableChangeListener l) {
        vetoableChangeSupport.addVetoableChangeListener(l);
    }
    
    /** Removes a VetoableChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removeVetoableChangeListener(java.beans.VetoableChangeListener l) {
        vetoableChangeSupport.removeVetoableChangeListener(l);
    }
    
    /** Getter for property hour.
     * @return Value of property hour.
     */
    public int getHour() {
        return this.hour;
    }
    
    /** Setter for property hour.
     * @param hour New value of property hour.
     *
     * @throws PropertyVetoException
     */
    public void setHour(int hour) throws java.beans.PropertyVetoException {
        DecimalFormat d = new DecimalFormat("00");
        int oldHour = this.hour;
        vetoableChangeSupport.fireVetoableChange("hour", new Integer(oldHour), new Integer(hour));
        this.hour = hour;
        this.hourField.setText(d.format(hour));
        propertyChangeSupport.firePropertyChange("hour", new Integer(oldHour), new Integer(hour));
    }
    
    /** Getter for property minute.
     * @return Value of property minute.
     */
    public int getMinute() {
        return this.minute;
    }
    
    /** Setter for property minute.
     * @param minute New value of property minute.
     *
     * @throws PropertyVetoException
     */
    public void setMinute(int minute) throws java.beans.PropertyVetoException {
        DecimalFormat d = new DecimalFormat("00");
        int oldMinute = this.minute;
        vetoableChangeSupport.fireVetoableChange("minute", new Integer(oldMinute), new Integer(minute));
        this.minute = minute;
        this.minuteField.setText(d.format(minute));
        propertyChangeSupport.firePropertyChange("minute", new Integer(oldMinute), new Integer(minute));
    }
    
    /** Getter for property second.
     * @return Value of property second.
     */
    public int getSecond() {
        return this.second;
    }
    
    /** Setter for property second.
     * @param second New value of property second.
     *
     * @throws PropertyVetoException
     */
    public void setSecond(int second) throws java.beans.PropertyVetoException {
        DecimalFormat d = new DecimalFormat("00");        
        int oldSecond = this.second;
        vetoableChangeSupport.fireVetoableChange("second", new Integer(oldSecond), new Integer(second));
        this.second = second;
        this.secondField.setText(d.format(second));
        propertyChangeSupport.firePropertyChange("second", new Integer(oldSecond), new Integer(second));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField hourField;
    private javax.swing.JTextField secondField;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField minuteField;
    // End of variables declaration//GEN-END:variables

    /** Holds value of property hour. */
    private int hour;    
    
    /** Utility field used by bound properties. */
    private java.beans.PropertyChangeSupport propertyChangeSupport =  new java.beans.PropertyChangeSupport(this);
    
    /** Utility field used by constrained properties. */
    private java.beans.VetoableChangeSupport vetoableChangeSupport =  new java.beans.VetoableChangeSupport(this);
    
    /** Holds value of property minute. */
    private int minute;
    
    /** Holds value of property second. */
    private int second;
    
}
