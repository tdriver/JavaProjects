/*
 * dateSpinnerBean.java
 *
 * Created on August 6, 2004, 7:53 AM
 */

package driver.ted.beans.TimeDate;
//import javax.swing.*;
//import java.awt.Color;
//import java.awt.Container;
//import java.util.Calendar;
//import java.util.Date;
/**
 *
 * @author  tdriver
 */
public class dateTimeSpinnerBean extends javax.swing.JPanel {
    private javax.swing.SpinnerDateModel dateModel;
    private javax.swing.JFormattedTextField ftf = null;
    /** Creates new form dateSpinnerBean */
    public dateTimeSpinnerBean(){ 
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        //Add the third label-spinner pair.
        java.util.Date initDate = calendar.getTime();
        calendar.set(-4712, 1, 1, 0, 0, 0);
        java.util.Date earliestDate = calendar.getTime();
        calendar.add(java.util.Calendar.YEAR, 200);
        java.util.Date latestDate = calendar.getTime();
        dateModel = new javax.swing.SpinnerDateModel(initDate,
                                     earliestDate,
                                     null,
                                     java.util.Calendar.DAY_OF_MONTH);
        initComponents();       
        
        
        javax.swing.JComponent dateEditor = new javax.swing.JSpinner.DateEditor(dateSpinner, "yyyy MMMMM dd, hh:mm:ss aa");
        dateSpinner.setEditor(dateEditor);
        //Tweak the spinner's formatted text field.
        javax.swing.JComponent editor = dateSpinner.getEditor();
        ftf = ((javax.swing.JSpinner.DefaultEditor)editor).getTextField();
        if (ftf != null ) {
            ftf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
            //ftf.setBorder(BorderFactory.createEmptyBorder(1,1,1,3));
        }
        //dateSpinner.setBorder(BorderFactory.createLineBorder(java.awt.Color.BLACK, 1));
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        dateSpinner = new javax.swing.JSpinner();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.TitledBorder("Date/Time"));
        setPreferredSize(new java.awt.Dimension(300, 45));
        dateSpinner.setModel(dateModel);
        dateSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dateSpinnerStateChanged(evt);
            }
        });

        add(dateSpinner, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void dateSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dateSpinnerStateChanged
        // set the date time variable to the JulianDate when state changes
        java.util.Date now = dateModel.getDate();
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.setTime(now);
        //int month = cal.get(cal.DAY_OF_MONTH) + 1;
        driver.ted.utilities.T_JulianDate newDate = new driver.ted.utilities.T_JulianDate(
        cal.get(cal.MONTH) + 1,cal.get(cal.DAY_OF_MONTH), cal.get(cal.YEAR),
        cal.get(cal.HOUR_OF_DAY),cal.get(cal.MINUTE),cal.get(cal.SECOND));
        setDateTime(newDate.getJulianDate());
    }//GEN-LAST:event_dateSpinnerStateChanged

    /**
     * Adds a PropertyChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addPropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.addPropertyChangeListener(l);
    }    
    
    /**
     * Removes a PropertyChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removePropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.removePropertyChangeListener(l);
    }    
    
    /**
     * Getter for property dateTime.
     * @return Double representing the Julian Date 
     */
    public double getDateTime() {
        return this.dateTime;
    }
    
    /**
     * Setter for property dateTime.
     * @param dateTime New value of property dateTime.
     */
    public void setDateTime(double dateTime) {
        double oldDateTime = this.dateTime;
        this.dateTime = dateTime;
        propertyChangeSupport.firePropertyChange("dateTime", new Double(oldDateTime), new Double(dateTime));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner dateSpinner;
    // End of variables declaration//GEN-END:variables

    /**
     * Holds value of property dateTime.
     */
    private double dateTime;    
    
    /**
     * Utility field used by bound properties.
     */
    private java.beans.PropertyChangeSupport propertyChangeSupport =  new java.beans.PropertyChangeSupport(this);
    
}
