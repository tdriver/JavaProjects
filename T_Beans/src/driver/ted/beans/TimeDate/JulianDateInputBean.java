/*
 * JulianDateInputBean.java
 *
 * Created on July 26, 2002, 2:30 PM
 */

package driver.ted.beans.TimeDate;
import java.text.DecimalFormat;

/**
 *
 * @author  tdriver
 */
public class JulianDateInputBean extends javax.swing.JPanel {
    
    /** Creates new form BeanForm */
    public JulianDateInputBean() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        JDField = new javax.swing.JTextField();

        setLayout(new java.awt.GridLayout(1, 0));

        setBorder(new javax.swing.border.TitledBorder("Julian Date"));
        setToolTipText("Enter a positive decimal number");
        setMaximumSize(getPreferredSize());
        setMinimumSize(getPreferredSize());
        setPreferredSize(new java.awt.Dimension(122, 43));
        addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)
            throws java.beans.PropertyVetoException {
                formVetoableChange(evt);
            }
        });

        JDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JDFieldActionPerformed(evt);
            }
        });

        JDField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                JDFieldFocusGained(evt);
            }
        });

        JDField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JDFieldMouseClicked(evt);
            }
        });

        add(JDField);

    }//GEN-END:initComponents

    private void formVetoableChange(java.beans.PropertyChangeEvent evt) throws java.beans.PropertyVetoException {//GEN-FIRST:event_formVetoableChange
        String prop = evt.getPropertyName();
        if(prop == "JD"){
            if(((Double)evt.getNewValue()).doubleValue() < 0.0){
                JDField.setText(((Double)evt.getOldValue()).toString());
                throw new java.beans.PropertyVetoException("Julian dates must not be negative.",evt);
            }
        }
    }//GEN-LAST:event_formVetoableChange

    private void JDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JDFieldActionPerformed
        try{
            this.setJD(Double.parseDouble(JDField.getText()));
        }catch(NumberFormatException nfe){
            JDField.setText("0.0");
            javax.swing.JOptionPane.showMessageDialog(this, 
                "You must use a decimal number for the Julian Date",
                "Error in Number Format",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }catch(java.beans.PropertyVetoException pve){
            javax.swing.JOptionPane.showMessageDialog(this, 
                pve.getMessage(),
                "Error",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_JDFieldActionPerformed

    private void JDFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JDFieldMouseClicked
        JDField.selectAll();
    }//GEN-LAST:event_JDFieldMouseClicked

    private void JDFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_JDFieldFocusGained
        JDField.selectAll();
    }//GEN-LAST:event_JDFieldFocusGained

    /** Adds a PropertyChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addPropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.addPropertyChangeListener(l);
    }    

    /** Removes a PropertyChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removePropertyChangeListener(java.beans.PropertyChangeListener l) {
        propertyChangeSupport.removePropertyChangeListener(l);
    }
    
    /** Adds a VetoableChangeListener to the listener list.
     * @param l The listener to add.
     */
    public void addVetoableChangeListener(java.beans.VetoableChangeListener l) {
        vetoableChangeSupport.addVetoableChangeListener(l);
    }
    
    /** Removes a VetoableChangeListener from the listener list.
     * @param l The listener to remove.
     */
    public void removeVetoableChangeListener(java.beans.VetoableChangeListener l) {
        vetoableChangeSupport.removeVetoableChangeListener(l);
    }
    
    /** Getter for property JD.
     * @return Value of property JD.
     */
    public double getJD() {
        return this.JD;
    }
    
    /** Setter for property JD.
     * @param JD New value of property JD.
     *
     * @throws PropertyVetoException
     */
    public void setJD(double JD) throws java.beans.PropertyVetoException {
        DecimalFormat df = new DecimalFormat("0.000000");
        double oldJD = this.JD;
        vetoableChangeSupport.fireVetoableChange("JD", new Double(oldJD), new Double(JD));
        this.JD = JD;
        JDField.setText(df.format(JD));
        propertyChangeSupport.firePropertyChange("JD", new Double(oldJD), new Double(JD));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField JDField;
    // End of variables declaration//GEN-END:variables

    /** Utility field used by bound properties. */
    private java.beans.PropertyChangeSupport propertyChangeSupport =  new java.beans.PropertyChangeSupport(this);
    
    /** Holds value of property JD. */
    private double JD;
    
    /** Utility field used by constrained properties. */
    private java.beans.VetoableChangeSupport vetoableChangeSupport =  new java.beans.VetoableChangeSupport(this);
    
}
